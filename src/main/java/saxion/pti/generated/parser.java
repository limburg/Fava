
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 07 16:44:42 CET 2012
//----------------------------------------------------

package saxion.pti.generated;

import java_cup.runtime.*;
import saxion.pti.ast.BuildTree;
import saxion.pti.ast.types.Type;
import saxion.pti.ast.nodes.Node;
import saxion.pti.ast.nodes.VariableNode;
import saxion.pti.ast.types.Operator;
import saxion.pti.ast.types.Factor;
import saxion.pti.ast.nodes.statement.ExpressionNode;
import java.util.Collections;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 07 16:44:42 CET 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\003\000\002\041" +
    "\004\000\002\037\002\000\002\037\005\000\002\036\002" +
    "\000\002\036\004\000\002\035\005\000\002\035\007\000" +
    "\002\040\002\000\002\040\004\000\002\034\004\000\002" +
    "\033\002\000\002\033\005\000\002\050\004\000\002\047" +
    "\002\000\002\047\004\000\002\005\003\000\002\005\003" +
    "\000\002\020\010\000\002\004\007\000\002\006\006\000" +
    "\002\042\003\000\002\042\005\000\002\042\002\000\002" +
    "\010\004\000\002\007\003\000\002\043\002\000\002\043" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\023\011\000\002\022\007\000\002\014\012\000\002" +
    "\031\002\000\002\031\006\000\002\013\007\000\002\032" +
    "\002\000\002\032\004\000\002\012\006\000\002\017\003" +
    "\000\002\015\003\000\002\015\005\000\002\015\005\000" +
    "\002\024\004\000\002\045\002\000\002\045\004\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\025\005\000\002\025\005\000\002\025\004" +
    "\000\002\044\002\000\002\044\004\000\002\044\004\000" +
    "\002\021\003\000\002\046\003\000\002\046\005\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\005" +
    "\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\014\002\ufffe\010\ufffe\036\ufffe\037\ufffe\040" +
    "\ufffe\001\002\000\004\002\203\001\002\000\014\002\000" +
    "\010\ufff8\036\ufff8\037\ufff8\040\ufff8\001\002\000\004\036" +
    "\113\001\002\000\012\010\010\036\ufffc\037\ufffc\040\ufffc" +
    "\001\002\000\006\037\013\040\015\001\002\000\012\010" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\001\002\000\010\036\uffff" +
    "\037\013\040\015\001\002\000\004\043\ufff0\001\002\000" +
    "\004\043\020\001\002\000\004\043\uffef\001\002\000\010" +
    "\036\ufffb\037\ufffb\040\ufffb\001\002\000\006\012\101\035" +
    "\102\001\002\000\054\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\032\025\033\ufff5\034\ufff5" +
    "\035\ufff5\041\ufff5\043\ufff5\044\ufff5\001\002\000\010\012" +
    "\ufff2\034\022\035\ufff2\001\002\000\004\043\020\001\002" +
    "\000\006\012\ufff3\035\ufff3\001\002\000\006\012\ufff1\035" +
    "\ufff1\001\002\000\016\014\036\015\027\026\043\041\031" +
    "\043\020\044\044\001\002\000\052\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\041\ufff6\043\ufff6\044\ufff6\001\002\000\012" +
    "\026\043\041\031\043\020\044\044\001\002\000\030\011" +
    "\073\013\074\014\uffd4\015\uffd4\026\uffd4\027\uffd4\033\uffd4" +
    "\035\uffd4\041\uffd4\043\uffd4\044\uffd4\001\002\000\046\011" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\033" +
    "\uffbd\035\uffbd\041\uffbd\043\uffbd\044\uffbd\001\002\000\040" +
    "\011\uffc4\013\uffc4\014\uffc4\015\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\033\uffc4\035\uffc4\041\uffc4" +
    "\043\uffc4\044\uffc4\001\002\000\040\011\uffc7\013\uffc7\014" +
    "\065\015\067\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\033\uffc7\035\uffc7\041\uffc7\043\uffc7\044\uffc7\001" +
    "\002\000\046\011\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\033\uffbe\035\uffbe\041\uffbe\043\uffbe\044\uffbe" +
    "\001\002\000\046\011\uffba\013\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\033\uffba\035\uffba\041\uffba\043\uffba\044" +
    "\uffba\001\002\000\012\026\043\041\031\043\020\044\044" +
    "\001\002\000\006\033\uffd5\035\uffd5\001\002\000\040\011" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\022\062\023\060\024\061" +
    "\025\055\026\uffd0\027\uffd0\033\uffd0\035\uffd0\041\uffd0\043" +
    "\uffd0\044\uffd0\001\002\000\046\011\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\016\052\017\051\020\050\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\033\uffc3\035\uffc3\041\uffc3" +
    "\043\uffc3\044\uffc3\001\002\000\004\033\047\001\002\000" +
    "\016\014\036\015\027\026\043\041\031\043\020\044\044" +
    "\001\002\000\046\011\uffbc\013\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\033\uffbc\035\uffbc\041\uffbc\043\uffbc\044" +
    "\uffbc\001\002\000\004\027\046\001\002\000\046\011\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\033\uffbb" +
    "\035\uffbb\041\uffbb\043\uffbb\044\uffbb\001\002\000\052\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\033\ufff4\034\ufff4\035\ufff4\041\ufff4\043\ufff4\044\ufff4" +
    "\001\002\000\012\026\uffbf\041\uffbf\043\uffbf\044\uffbf\001" +
    "\002\000\012\026\uffc0\041\uffc0\043\uffc0\044\uffc0\001\002" +
    "\000\012\026\uffc1\041\uffc1\043\uffc1\044\uffc1\001\002\000" +
    "\012\026\043\041\031\043\020\044\044\001\002\000\040" +
    "\011\uffc2\013\uffc2\014\uffc2\015\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\033\uffc2\035\uffc2\041\uffc2" +
    "\043\uffc2\044\uffc2\001\002\000\016\014\uffcb\015\uffcb\026" +
    "\uffcb\041\uffcb\043\uffcb\044\uffcb\001\002\000\016\014\036" +
    "\015\027\026\043\041\031\043\020\044\044\001\002\000" +
    "\030\011\uffd1\013\uffd1\014\uffd1\015\uffd1\026\uffd1\027\uffd1" +
    "\033\uffd1\035\uffd1\041\uffd1\043\uffd1\044\uffd1\001\002\000" +
    "\016\014\uffcd\015\uffcd\026\uffcd\041\uffcd\043\uffcd\044\uffcd" +
    "\001\002\000\016\014\uffcc\015\uffcc\026\uffcc\041\uffcc\043" +
    "\uffcc\044\uffcc\001\002\000\016\014\uffce\015\uffce\026\uffce" +
    "\041\uffce\043\uffce\044\uffce\001\002\000\030\011\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\026\uffcf\027\uffcf\033\uffcf\035\uffcf" +
    "\041\uffcf\043\uffcf\044\uffcf\001\002\000\040\011\uffc7\013" +
    "\uffc7\014\065\015\067\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\033\uffc7\035\uffc7\041\uffc7\043\uffc7\044" +
    "\uffc7\001\002\000\016\014\036\015\027\026\043\041\031" +
    "\043\020\044\044\001\002\000\040\011\uffca\013\uffca\014" +
    "\uffca\015\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\033\uffca\035\uffca\041\uffca\043\uffca\044\uffca\001" +
    "\002\000\016\014\036\015\027\026\043\041\031\043\020" +
    "\044\044\001\002\000\040\011\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\033\uffc5\035\uffc5\041\uffc5\043\uffc5\044\uffc5\001\002\000" +
    "\040\011\uffc6\013\uffc6\014\uffc6\015\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\027\uffc6\033\uffc6\035\uffc6\041" +
    "\uffc6\043\uffc6\044\uffc6\001\002\000\040\011\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\033\uffc8\035\uffc8\041\uffc8\043\uffc8\044\uffc8" +
    "\001\002\000\016\014\036\015\027\026\043\041\031\043" +
    "\020\044\044\001\002\000\016\014\036\015\027\026\043" +
    "\041\031\043\020\044\044\001\002\000\024\014\uffd3\015" +
    "\uffd3\026\uffd3\027\uffd3\033\uffd3\035\uffd3\041\uffd3\043\uffd3" +
    "\044\uffd3\001\002\000\024\014\uffd2\015\uffd2\026\uffd2\027" +
    "\uffd2\033\uffd2\035\uffd2\041\uffd2\043\uffd2\044\uffd2\001\002" +
    "\000\040\011\uffc7\013\uffc7\014\065\015\067\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\033\uffc7\035\uffc7" +
    "\041\uffc7\043\uffc7\044\uffc7\001\002\000\040\011\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\033\uffc9\035\uffc9\041\uffc9\043\uffc9\044" +
    "\uffc9\001\002\000\016\014\036\015\027\026\043\041\031" +
    "\043\020\044\044\001\002\000\022\005\ufffa\006\ufffa\031" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\042\ufffa\043\ufffa\001\002" +
    "\000\004\035\104\001\002\000\022\005\ufff9\006\ufff9\031" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\042\ufff9\043\ufff9\001\002" +
    "\000\004\043\106\001\002\000\004\012\107\001\002\000" +
    "\016\014\036\015\027\026\043\041\031\043\020\044\044" +
    "\001\002\000\004\035\111\001\002\000\012\010\uffee\036" +
    "\uffee\037\uffee\040\uffee\001\002\000\014\002\ufffd\010\ufffd" +
    "\036\ufffd\037\ufffd\040\ufffd\001\002\000\004\043\114\001" +
    "\002\000\004\026\173\001\002\000\004\030\116\001\002" +
    "\000\020\005\uffe6\006\uffe6\031\uffe6\037\uffe6\040\uffe6\042" +
    "\uffe6\043\uffe6\001\002\000\004\031\172\001\002\000\020" +
    "\005\121\006\123\031\uffe7\037\013\040\015\042\130\043" +
    "\125\001\002\000\004\026\164\001\002\000\004\012\161" +
    "\001\002\000\004\026\146\001\002\000\020\005\uffe5\006" +
    "\uffe5\031\uffe5\037\uffe5\040\uffe5\042\uffe5\043\uffe5\001\002" +
    "\000\010\012\ufff5\026\142\032\025\001\002\000\020\005" +
    "\uffe3\006\uffe3\031\uffe3\037\uffe3\040\uffe3\042\uffe3\043\uffe3" +
    "\001\002\000\020\005\uffdf\006\uffdf\031\uffdf\037\uffdf\040" +
    "\uffdf\042\uffdf\043\uffdf\001\002\000\004\026\135\001\002" +
    "\000\020\005\uffe2\006\uffe2\031\uffe2\037\uffe2\040\uffe2\042" +
    "\uffe2\043\uffe2\001\002\000\020\005\uffe0\006\uffe0\031\uffe0" +
    "\037\uffe0\040\uffe0\042\uffe0\043\uffe0\001\002\000\020\005" +
    "\uffe1\006\uffe1\031\uffe1\037\uffe1\040\uffe1\042\uffe1\043\uffe1" +
    "\001\002\000\020\005\uffe4\006\uffe4\031\uffe4\037\uffe4\040" +
    "\uffe4\042\uffe4\043\uffe4\001\002\000\020\014\uffd8\015\uffd8" +
    "\026\uffd8\027\uffd8\041\uffd8\043\uffd8\044\uffd8\001\002\000" +
    "\020\014\036\015\027\026\043\027\140\041\031\043\020" +
    "\044\044\001\002\000\020\014\uffd7\015\uffd7\026\uffd7\027" +
    "\uffd7\041\uffd7\043\uffd7\044\uffd7\001\002\000\004\035\141" +
    "\001\002\000\020\005\uffdd\006\uffdd\031\uffdd\037\uffdd\040" +
    "\uffdd\042\uffdd\043\uffdd\001\002\000\020\014\uffd8\015\uffd8" +
    "\026\uffd8\027\uffd8\041\uffd8\043\uffd8\044\uffd8\001\002\000" +
    "\020\014\036\015\027\026\043\027\144\041\031\043\020" +
    "\044\044\001\002\000\004\035\145\001\002\000\020\005" +
    "\uffd9\006\uffd9\031\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9" +
    "\001\002\000\016\014\036\015\027\026\043\041\031\043" +
    "\020\044\044\001\002\000\004\027\150\001\002\000\004" +
    "\030\151\001\002\000\020\005\uffe6\006\uffe6\031\uffe6\037" +
    "\uffe6\040\uffe6\042\uffe6\043\uffe6\001\002\000\020\005\121" +
    "\006\123\031\153\037\013\040\015\042\130\043\125\001" +
    "\002\000\022\004\154\005\uffdb\006\uffdb\031\uffdb\037\uffdb" +
    "\040\uffdb\042\uffdb\043\uffdb\001\002\000\004\030\156\001" +
    "\002\000\020\005\uffdc\006\uffdc\031\uffdc\037\uffdc\040\uffdc" +
    "\042\uffdc\043\uffdc\001\002\000\020\005\uffe6\006\uffe6\031" +
    "\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6\001\002\000\020" +
    "\005\121\006\123\031\160\037\013\040\015\042\130\043" +
    "\125\001\002\000\020\005\uffda\006\uffda\031\uffda\037\uffda" +
    "\040\uffda\042\uffda\043\uffda\001\002\000\016\014\036\015" +
    "\027\026\043\041\031\043\020\044\044\001\002\000\004" +
    "\035\163\001\002\000\020\005\uffd6\006\uffd6\031\uffd6\037" +
    "\uffd6\040\uffd6\042\uffd6\043\uffd6\001\002\000\016\014\036" +
    "\015\027\026\043\041\031\043\020\044\044\001\002\000" +
    "\004\027\166\001\002\000\004\030\167\001\002\000\020" +
    "\005\uffe6\006\uffe6\031\uffe6\037\uffe6\040\uffe6\042\uffe6\043" +
    "\uffe6\001\002\000\020\005\121\006\123\031\171\037\013" +
    "\040\015\042\130\043\125\001\002\000\020\005\uffde\006" +
    "\uffde\031\uffde\037\uffde\040\uffde\042\uffde\043\uffde\001\002" +
    "\000\014\002\uffed\010\uffed\036\uffed\037\uffed\040\uffed\001" +
    "\002\000\012\027\uffe9\034\uffe9\037\013\040\015\001\002" +
    "\000\006\027\uffeb\034\uffeb\001\002\000\004\043\202\001" +
    "\002\000\006\027\200\034\177\001\002\000\006\037\013" +
    "\040\015\001\002\000\004\030\uffec\001\002\000\006\027" +
    "\uffea\034\uffea\001\002\000\006\027\uffe8\034\uffe8\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\006\002\003\037\004\001\001\000\002\001" +
    "\001\000\006\040\006\041\005\001\001\000\004\004\111" +
    "\001\001\000\006\020\010\036\011\001\001\000\004\005" +
    "\104\001\001\000\002\001\001\000\006\005\013\035\015" +
    "\001\001\000\002\001\001\000\006\034\020\050\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\025\001\001\000\004\047\022\001\001\000" +
    "\006\034\020\050\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\015\036\016\033\017\041\021\032\024" +
    "\027\025\037\026\040\034\034\046\031\001\001\000\002" +
    "\001\001\000\014\016\033\021\076\026\040\034\034\046" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\033\021\063\026\040\034\034" +
    "\046\031\001\001\000\002\001\001\000\006\030\055\045" +
    "\056\001\001\000\004\027\052\001\001\000\002\001\001" +
    "\000\022\015\044\016\033\021\032\024\027\025\037\026" +
    "\040\034\034\046\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\033" +
    "\026\040\034\034\046\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\033\021\032\025\062\026\040" +
    "\034\034\046\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\065\001\001\000\016\016\033\021\032\025" +
    "\070\026\040\034\034\046\031\001\001\000\002\001\001" +
    "\000\016\016\033\021\032\025\067\026\040\034\034\046" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\075\016\033\021\032\024\027\025" +
    "\037\026\040\034\034\046\031\001\001\000\022\015\074" +
    "\016\033\021\032\024\027\025\037\026\040\034\034\046" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\077\001\001\000\002\001\001\000\022\015\102\016" +
    "\033\021\032\024\027\025\037\026\040\034\034\046\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\036" +
    "\016\033\017\107\021\032\024\027\025\037\026\040\034" +
    "\034\046\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\116\043\117\001\001" +
    "\000\002\001\001\000\024\005\013\011\123\012\133\013" +
    "\125\014\130\022\132\023\126\034\121\035\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\135\001\001\000\022\015\136\016\033\021\032\024" +
    "\027\025\037\026\040\034\034\046\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\142\001\001\000\022\015\136\016\033\021\032\024\027" +
    "\025\037\026\040\034\034\046\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\146\016\033\021\032" +
    "\024\027\025\037\026\040\034\034\046\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\151\001\001" +
    "\000\024\005\013\011\123\012\133\013\125\014\130\022" +
    "\132\023\126\034\121\035\131\001\001\000\004\031\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\156\001\001\000\024\005\013\011\123\012\133\013\125" +
    "\014\130\022\132\023\126\034\121\035\131\001\001\000" +
    "\002\001\001\000\022\015\161\016\033\021\032\024\027" +
    "\025\037\026\040\034\034\046\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\164\016\033\021\032" +
    "\024\027\025\037\026\040\034\034\046\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\167\001\001" +
    "\000\024\005\013\011\123\012\133\013\125\014\130\022" +
    "\132\023\126\034\121\035\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\174\010\173\042\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\174\010\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 	
	// Build Tree met java code, zodat onze CUP file netjes blijft & onze code compileert en makkelijk te debuggen is.
	private BuildTree buildTree = new BuildTree();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // designator ::= identifier_array 
            {
              Node RESULT =null;
		buildTree.debugMsg("Designator");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= LPAREN expression RPAREN 
            {
              Factor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Factor<ExpressionNode>(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= STATIC_STRING 
            {
              Factor RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Factor<String>(s);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= STATIC_INT 
            {
              Factor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Factor<Integer>(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= designator 
            {
              Factor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor_operator ::= FSLASH 
            {
              Factor RESULT =null;
		 RESULT = new Factor<Operator>(new Operator(sym.FSLASH));   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor_operator ::= MOD 
            {
              Factor RESULT =null;
		 RESULT = new Factor<Operator>(new Operator(sym.MOD));      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor_operator ::= ASTERICK 
            {
              Factor RESULT =null;
		 RESULT = new Factor<Operator>(new Operator(sym.ASTERICK)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term_ ::= factor factor_operator term_ 
            {
              LinkedList<Factor< ? >> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Factor e = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Factor o = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Factor< ? >> t = (LinkedList<Factor< ? >>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = buildTree.createFactorList(e,o,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term_ ::= factor 
            {
              LinkedList<Factor< ? >> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor e = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = buildTree.createFactorList(e, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= term_ 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Factor< ? >> t = (LinkedList<Factor< ? >>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressionNode(buildTree.getCurrentNode(), t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // simple_expression_ ::= MINUS simple_expression 
            {
              LinkedList<Node> RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression_",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // simple_expression_ ::= PLUS simple_expression 
            {
              LinkedList<Node> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression_",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // simple_expression_ ::= 
            {
              LinkedList<Node> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression_",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // simple_expression ::= term simple_expression_ 
            {
              Factor RESULT =null;
		buildTree.debugMsg("Simpl Expression");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // simple_expression ::= MINUS term simple_expression_ 
            {
              Factor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simple_expression ::= PLUS term simple_expression_ 
            {
              Factor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comparator_operator ::= GREATEREQ 
            {
              Node RESULT =null;
		buildTree.debugMsg("Comparator Op");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparator_operator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comparator_operator ::= GREATER 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparator_operator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comparator_operator ::= LESSEQ 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparator_operator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comparator_operator ::= LESS 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparator_operator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // equality_expression_ ::= comparator_operator simple_expression 
            {
              LinkedList<Node> RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression_",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // equality_expression_ ::= 
            {
              LinkedList<Node> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression_",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // equality_expression ::= simple_expression equality_expression_ 
            {
              Factor RESULT =null;
		buildTree.debugMsg("Eq Expression");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= equality_expression NEQ expression 
            {
              ExpressionNode RESULT =null;
		buildTree.debugMsg("Expression");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= equality_expression EQEQ expression 
            {
              ExpressionNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= equality_expression 
            {
              ExpressionNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // static_expression ::= expression 
            {
              Node RESULT =null;
		buildTree.debugMsg("static Expression");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("static_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assignment_statement ::= identifier_array EQ expression SEMICOLON 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				buildTree.createAssignment(name);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression_list_ ::= expression_list_ expression 
            {
              Node RESULT =null;
		buildTree.debugMsg("Expression List");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list_",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression_list_ ::= 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list_",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // procedure_call ::= IDENTIFIER LPAREN expression_list_ RPAREN SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		buildTree.debugMsg("Procedure Call (" + id + ")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // else_statement ::= ELSE LBRACE statement_sequence_ RBRACE 
            {
              Node RESULT =null;
		buildTree.debugMsg("Else Statement");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // else_statement ::= 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if_statement ::= IF LPAREN expression RPAREN LBRACE statement_sequence_ RBRACE else_statement 
            {
              Node RESULT =null;
		buildTree.debugMsg("If Statement");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // println_statement ::= FUNC_PRINTLN LPAREN expression_list_ RPAREN SEMICOLON 
            {
              Node RESULT =null;
		buildTree.debugMsg("Println Function");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("println_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // while_statement ::= WHILE LPAREN expression RPAREN LBRACE statement_sequence_ RBRACE 
            {
              Node RESULT =null;
		buildTree.debugMsg("While Statement");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= while_statement 
            {
              Node RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= variable_declaration 
            {
              Node RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= println_statement 
            {
              Node RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= if_statement 
            {
              Node RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= procedure_call 
            {
              Node RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= assignment_statement 
            {
              Node RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement_sequence_ ::= statement_sequence_ statement 
            {
              LinkedList<Node> RESULT =null;
		buildTree.debugMsg("Statement Sequence...");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement_sequence_ ::= 
            {
              LinkedList<Node> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procedure_body ::= statement_sequence_ 
            {
              Node RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formal_parameter_section ::= type IDENTIFIER 
            {
              Node RESULT =null;
		int t_typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t_typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t_type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              		RESULT = new VariableNode(t_type, t_id); 
              	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_section",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formal_parameter_ ::= 
            {
              LinkedList<Node> RESULT =null;
		 RESULT = new LinkedList<Node>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formal_parameter_ ::= formal_parameter_ COMMA formal_parameter_section 
            {
              LinkedList<Node> RESULT =null;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Node> paramList = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int secleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node sec = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            	    paramList.add(sec); 
            	    RESULT = paramList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formal_parameter_ ::= formal_parameter_section 
            {
              LinkedList<Node> RESULT =null;
		int secleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node sec = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              		LinkedList<Node> paramList = new LinkedList<Node>();
              		paramList.add(sec);
              		RESULT = paramList;
              		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedure_heading ::= IDENTIFIER LPAREN formal_parameter_ RPAREN 
            {
              Node RESULT =null;
		int p_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Node> params = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              	buildTree.pushNode( buildTree.createNewProcedure(p_id, params) );
              	
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedure_declaration ::= VOID procedure_heading LBRACE procedure_body RBRACE 
            {
              Node RESULT =null;
		 
              	buildTree.popNode();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // static_declaration ::= STATIC type IDENTIFIER EQ static_expression SEMICOLON 
            {
              Node RESULT =null;
		 buildTree.debugMsg ("StaticDecl"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("static_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= SYM_STRING 
            {
              Type RESULT =null;
		 RESULT = Type.newStringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= SYM_INT 
            {
              Type RESULT =null;
		 RESULT = Type.newIntType();    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // identifier_list_ ::= COMMA identifier_list 
            {
              LinkedList<String> RESULT =null;
		int id_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> id_l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                
                   RESULT = id_l;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list_",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // identifier_list_ ::= 
            {
              LinkedList<String> RESULT =null;
		
                   RESULT = new LinkedList<String>();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list_",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // identifier_list ::= identifier_array identifier_list_ 
            {
              LinkedList<String> RESULT =null;
		int id_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id_a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> id_l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   id_l.add(id_a);
                   RESULT = id_l;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identifier_array_ ::= LSQPAREN static_expression RSQPAREN 
            {
              String RESULT =null;
		int c_eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c_eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node c_e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = "[EXP]";
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_array_",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identifier_array_ ::= 
            {
              String RESULT =null;
		
                    RESULT= new String();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_array_",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identifier_array ::= IDENTIFIER identifier_array_ 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id_a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  id + id_a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_array",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // static_declaration_ ::= static_declaration_ static_declaration 
            {
              LinkedList<Node> RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("static_declaration_",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // static_declaration_ ::= 
            {
              LinkedList<Node> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("static_declaration_",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable_declaration ::= type identifier_list EQ expression SEMICOLON 
            {
              LinkedList<Node> RESULT =null;
		int t_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t_id = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> id_l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              // Voeg declaraties toe aan de scope van de huidige node (program of procedure):
              	  buildTree.addVariableDeclarations(t_id, id_l);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variable_declaration ::= type identifier_list SEMICOLON 
            {
              LinkedList<Node> RESULT =null;
		int t_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t_id = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> id_l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              	  // Voeg declaraties toe aan de scope van de huidige node (program of procedure):
              	  buildTree.addVariableDeclarations(t_id, id_l);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variable_declaration_ ::= variable_declaration_ variable_declaration 
            {
              LinkedList<Node> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Node> lst = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v_declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v_declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Node> v_decl = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variable_declaration_ ::= 
            {
              LinkedList<Node> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // procedure_declaration_ ::= procedure_declaration_ var_static_declaration_ procedure_declaration 
            {
              LinkedList<Node> RESULT =null;
		int v_c_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v_c_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Node> v_c_d = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // procedure_declaration_ ::= 
            {
              LinkedList<Node> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // var_static_declaration_ ::= static_declaration_ variable_declaration_ 
            {
              LinkedList<Node> RESULT =null;
		int c_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Node> c_d = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Node> v_d = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_static_declaration_",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= procedure_declaration_ 
            {
              Node RESULT =null;
		int p_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Node> p_d = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 buildTree.debugMsg("Program"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

