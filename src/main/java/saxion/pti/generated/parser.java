
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 10 12:27:29 CET 2012
//----------------------------------------------------

package saxion.pti.generated;

import java_cup.runtime.*;
import saxion.pti.ast.BuildTree;
import saxion.pti.ast.nodes.*;
import java.util.Collections;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 10 12:27:29 CET 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\033\002\000\002\004\013\000\002\034\002\000" +
    "\002\005\016\000\002\011\004\000\002\011\006\000\002" +
    "\011\002\000\002\006\005\000\002\006\007\000\002\010" +
    "\003\000\002\010\005\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\002\000\002\013\007\000\002\016" +
    "\006\000\002\015\007\000\002\014\003\000\002\014\005" +
    "\000\002\014\002\000\002\035\002\000\002\021\013\000" +
    "\002\036\002\000\002\037\002\000\002\017\014\000\002" +
    "\040\002\000\002\041\002\000\002\020\014\000\002\042" +
    "\002\000\002\020\007\000\002\020\002\000\002\022\003" +
    "\000\002\022\003\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\026\005\000\002\026\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\014\002\ufffc\007\011\037\006\040\015\041" +
    "\012\001\002\000\014\002\ufffc\007\011\037\006\040\015" +
    "\041\012\001\002\000\004\002\000\001\002\000\004\047" +
    "\206\001\002\000\004\002\205\001\002\000\014\002\ufffc" +
    "\007\011\037\006\040\015\041\012\001\002\000\004\047" +
    "\uffee\001\002\000\004\047\uffef\001\002\000\004\047\017" +
    "\001\002\000\014\002\ufffc\007\011\037\006\040\015\041" +
    "\012\001\002\000\004\047\ufff0\001\002\000\004\002\uffff" +
    "\001\002\000\012\013\ufff2\027\074\035\073\036\ufff2\001" +
    "\002\000\006\013\021\036\022\001\002\000\014\042\027" +
    "\043\024\045\023\047\031\050\032\001\002\000\030\002" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\032\ufff4\037\ufff4" +
    "\040\ufff4\041\ufff4\044\ufff4\047\ufff4\001\002\000\036\012" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4\035\uffc4\036" +
    "\uffc4\001\002\000\036\012\uffc2\014\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\023\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\030\uffc2\035\uffc2\036\uffc2\001\002\000\004\036\072" +
    "\001\002\000\036\012\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\030\uffc0\035\uffc0\036\uffc0\001\002\000\036\012\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\030\uffc1\035\uffc1\036\uffc1\001" +
    "\002\000\036\012\uffc9\014\uffc9\015\uffc9\016\uffc9\017\070" +
    "\020\067\021\066\023\uffc9\024\uffc9\025\uffc9\026\uffc9\030" +
    "\uffc9\035\uffc9\036\uffc9\001\002\000\040\012\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\040\030\uffc5\035\uffc5\036\uffc5" +
    "\001\002\000\036\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\030\uffc3\035\uffc3\036\uffc3\001\002\000\030\012\uffcb\014" +
    "\uffcb\015\034\016\035\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\030\uffcb\035\uffcb\036\uffcb\001\002\000\014\042\027\043" +
    "\024\045\023\047\031\050\032\001\002\000\014\042\027" +
    "\043\024\045\023\047\031\050\032\001\002\000\024\012" +
    "\uffcc\014\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc" +
    "\035\uffcc\036\uffcc\001\002\000\024\012\uffcd\014\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd\035\uffcd\036\uffcd" +
    "\001\002\000\016\030\uffe1\042\027\043\024\045\023\047" +
    "\031\050\032\001\002\000\010\030\uffd5\035\uffd5\036\uffd5" +
    "\001\002\000\024\012\055\014\056\023\054\024\052\025" +
    "\053\026\051\030\uffd4\035\uffd4\036\uffd4\001\002\000\006" +
    "\030\uffe3\035\047\001\002\000\004\030\045\001\002\000" +
    "\004\036\046\001\002\000\060\005\uffe4\006\uffe4\007\uffe4" +
    "\011\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4" +
    "\032\uffe4\035\uffe4\036\uffe4\040\uffe4\041\uffe4\044\uffe4\047" +
    "\uffe4\001\002\000\016\030\uffe1\042\027\043\024\045\023" +
    "\047\031\050\032\001\002\000\004\030\uffe2\001\002\000" +
    "\014\042\027\043\024\045\023\047\031\050\032\001\002" +
    "\000\014\042\027\043\024\045\023\047\031\050\032\001" +
    "\002\000\014\042\027\043\024\045\023\047\031\050\032" +
    "\001\002\000\014\042\027\043\024\045\023\047\031\050" +
    "\032\001\002\000\014\042\027\043\024\045\023\047\031" +
    "\050\032\001\002\000\014\042\027\043\024\045\023\047" +
    "\031\050\032\001\002\000\010\030\uffd3\035\uffd3\036\uffd3" +
    "\001\002\000\010\030\uffd2\035\uffd2\036\uffd2\001\002\000" +
    "\010\030\uffd1\035\uffd1\036\uffd1\001\002\000\010\030\uffcf" +
    "\035\uffcf\036\uffcf\001\002\000\010\030\uffd0\035\uffd0\036" +
    "\uffd0\001\002\000\010\030\uffce\035\uffce\036\uffce\001\002" +
    "\000\014\042\027\043\024\045\023\047\031\050\032\001" +
    "\002\000\014\042\uffc6\043\uffc6\045\uffc6\047\uffc6\050\uffc6" +
    "\001\002\000\014\042\uffc7\043\uffc7\045\uffc7\047\uffc7\050" +
    "\uffc7\001\002\000\014\042\uffc8\043\uffc8\045\uffc8\047\uffc8" +
    "\050\uffc8\001\002\000\030\012\uffca\014\uffca\015\uffca\016" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\030\uffca\035\uffca" +
    "\036\uffca\001\002\000\030\002\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\011\ufff3\032\ufff3\037\ufff3\040\ufff3\041\ufff3\044\ufff3" +
    "\047\ufff3\001\002\000\004\047\120\001\002\000\012\007" +
    "\011\030\ufff5\040\015\041\012\001\002\000\004\047\200" +
    "\001\002\000\004\030\077\001\002\000\004\031\ufff9\001" +
    "\002\000\004\031\101\001\002\000\022\005\102\006\106" +
    "\007\011\011\uffe7\040\015\041\012\044\111\047\112\001" +
    "\002\000\004\027\170\001\002\000\024\005\102\006\106" +
    "\007\011\011\uffe7\032\uffe7\040\015\041\012\044\111\047" +
    "\112\001\002\000\004\011\163\001\002\000\024\005\102" +
    "\006\106\007\011\011\uffe7\032\uffe7\040\015\041\012\044" +
    "\111\047\112\001\002\000\004\027\132\001\002\000\024" +
    "\005\102\006\106\007\011\011\uffe7\032\uffe7\040\015\041" +
    "\012\044\111\047\112\001\002\000\024\005\102\006\106" +
    "\007\011\011\uffe7\032\uffe7\040\015\041\012\044\111\047" +
    "\112\001\002\000\004\027\124\001\002\000\006\013\121" +
    "\027\040\001\002\000\004\047\120\001\002\000\024\005" +
    "\102\006\106\007\011\011\uffe7\032\uffe7\040\015\041\012" +
    "\044\111\047\112\001\002\000\024\005\102\006\106\007" +
    "\011\011\uffe7\032\uffe7\040\015\041\012\044\111\047\112" +
    "\001\002\000\006\011\uffea\032\uffea\001\002\000\006\011" +
    "\uffed\032\uffed\001\002\000\010\013\ufff2\035\073\036\ufff2" +
    "\001\002\000\014\042\027\043\024\045\023\047\031\050" +
    "\032\001\002\000\004\036\123\001\002\000\024\005\uffe5" +
    "\006\uffe5\007\uffe5\011\uffe5\032\uffe5\040\uffe5\041\uffe5\044" +
    "\uffe5\047\uffe5\001\002\000\014\042\027\043\024\045\023" +
    "\047\031\050\032\001\002\000\004\030\126\001\002\000" +
    "\004\036\127\001\002\000\024\005\uffe6\006\uffe6\007\uffe6" +
    "\011\uffe6\032\uffe6\040\uffe6\041\uffe6\044\uffe6\047\uffe6\001" +
    "\002\000\006\011\uffe8\032\uffe8\001\002\000\006\011\uffe9" +
    "\032\uffe9\001\002\000\014\042\027\043\024\045\023\047" +
    "\031\050\032\001\002\000\004\030\135\001\002\000\016" +
    "\012\055\014\056\023\054\024\052\025\053\026\051\001" +
    "\002\000\004\031\uffde\001\002\000\004\031\137\001\002" +
    "\000\022\005\102\006\106\007\011\032\uffe7\040\015\041" +
    "\012\044\111\047\112\001\002\000\004\032\141\001\002" +
    "\000\026\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\032" +
    "\uffdd\040\uffdd\041\uffdd\044\uffdd\047\uffdd\001\002\000\026" +
    "\004\143\005\uffd6\006\uffd6\007\uffd6\011\uffd6\032\uffd6\040" +
    "\uffd6\041\uffd6\044\uffd6\047\uffd6\001\002\000\006\027\146" +
    "\031\uffd8\001\002\000\024\005\uffdc\006\uffdc\007\uffdc\011" +
    "\uffdc\032\uffdc\040\uffdc\041\uffdc\044\uffdc\047\uffdc\001\002" +
    "\000\004\031\157\001\002\000\014\042\027\043\024\045" +
    "\023\047\031\050\032\001\002\000\004\030\150\001\002" +
    "\000\004\031\uffdb\001\002\000\004\031\152\001\002\000" +
    "\022\005\102\006\106\007\011\032\uffe7\040\015\041\012" +
    "\044\111\047\112\001\002\000\004\032\154\001\002\000" +
    "\026\004\uffda\005\uffda\006\uffda\007\uffda\011\uffda\032\uffda" +
    "\040\uffda\041\uffda\044\uffda\047\uffda\001\002\000\026\004" +
    "\143\005\uffd6\006\uffd6\007\uffd6\011\uffd6\032\uffd6\040\uffd6" +
    "\041\uffd6\044\uffd6\047\uffd6\001\002\000\024\005\uffd9\006" +
    "\uffd9\007\uffd9\011\uffd9\032\uffd9\040\uffd9\041\uffd9\044\uffd9" +
    "\047\uffd9\001\002\000\022\005\102\006\106\007\011\032" +
    "\uffe7\040\015\041\012\044\111\047\112\001\002\000\004" +
    "\032\161\001\002\000\024\005\uffd7\006\uffd7\007\uffd7\011" +
    "\uffd7\032\uffd7\040\uffd7\041\uffd7\044\uffd7\047\uffd7\001\002" +
    "\000\006\011\uffeb\032\uffeb\001\002\000\014\042\027\043" +
    "\024\045\023\047\031\050\032\001\002\000\004\036\165" +
    "\001\002\000\004\032\166\001\002\000\014\002\ufff8\007" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\001\002\000\006\011\uffec" +
    "\032\uffec\001\002\000\014\042\027\043\024\045\023\047" +
    "\031\050\032\001\002\000\004\030\172\001\002\000\004" +
    "\031\uffe0\001\002\000\004\031\174\001\002\000\022\005" +
    "\102\006\106\007\011\032\uffe7\040\015\041\012\044\111" +
    "\047\112\001\002\000\004\032\176\001\002\000\026\004" +
    "\143\005\uffd6\006\uffd6\007\uffd6\011\uffd6\032\uffd6\040\uffd6" +
    "\041\uffd6\044\uffd6\047\uffd6\001\002\000\024\005\uffdf\006" +
    "\uffdf\007\uffdf\011\uffdf\032\uffdf\040\uffdf\041\uffdf\044\uffdf" +
    "\047\uffdf\001\002\000\006\030\ufff7\035\201\001\002\000" +
    "\012\007\011\030\ufff5\040\015\041\012\001\002\000\004" +
    "\030\ufff6\001\002\000\006\013\ufff1\036\ufff1\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\001\001\002\000\004" +
    "\027\207\001\002\000\012\007\011\030\ufff5\040\015\041" +
    "\012\001\002\000\004\030\211\001\002\000\004\031\ufffb" +
    "\001\002\000\004\031\213\001\002\000\022\005\102\006" +
    "\106\007\011\032\uffe7\040\015\041\012\044\111\047\112" +
    "\001\002\000\004\032\215\001\002\000\014\002\ufffa\007" +
    "\ufffa\037\ufffa\040\ufffa\041\ufffa\001\002\000\004\002\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\016\002\006\003\004\004\003\005\007\006" +
    "\013\007\012\001\001\000\014\003\215\004\003\005\007" +
    "\006\013\007\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\203\004\003\005\007" +
    "\006\013\007\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\017\001\001\000\014\003\015\004\003" +
    "\005\007\006\013\007\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\025\025\024\026\032\027\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\025\025\036\026\032\027\027\001\001\000" +
    "\012\015\025\025\035\026\032\027\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\014\043\015\025\022" +
    "\042\023\040\025\041\026\032\027\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\014\047" +
    "\015\025\022\042\023\040\025\041\026\032\027\027\001" +
    "\001\000\002\001\001\000\012\015\025\025\063\026\032" +
    "\027\027\001\001\000\012\015\025\025\062\026\032\027" +
    "\027\001\001\000\012\015\025\025\061\026\032\027\027" +
    "\001\001\000\012\015\025\025\060\026\032\027\027\001" +
    "\001\000\012\015\025\025\057\026\032\027\027\001\001" +
    "\000\012\015\025\025\056\026\032\027\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\025\026\070\027\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\202\001\001\000\006\007\074\011\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\077\001\001\000\002\001\001\000\022\006\113\007\112" +
    "\012\103\013\107\015\104\016\102\017\106\021\114\001" +
    "\001\000\002\001\001\000\022\006\113\007\112\012\166" +
    "\013\107\015\104\016\102\017\106\021\114\001\001\000" +
    "\002\001\001\000\022\006\113\007\112\012\161\013\107" +
    "\015\104\016\102\017\106\021\114\001\001\000\002\001" +
    "\001\000\022\006\113\007\112\012\130\013\107\015\104" +
    "\016\102\017\106\021\114\001\001\000\022\006\113\007" +
    "\112\012\127\013\107\015\104\016\102\017\106\021\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\017\001\001\000\022\006\113\007\112\012\116\013\107" +
    "\015\104\016\102\017\106\021\114\001\001\000\022\006" +
    "\113\007\112\012\115\013\107\015\104\016\102\017\106" +
    "\021\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\015\025\022\121\023\040\025\041" +
    "\026\032\027\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\015\025\022\124\023\040\025\041\026\032" +
    "\027\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\025\023\132\025\133\026\032\027\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\135\001\001" +
    "\000\002\001\001\000\022\006\113\007\112\012\137\013" +
    "\107\015\104\016\102\017\106\021\114\001\001\000\002" +
    "\001\001\000\004\037\141\001\001\000\004\020\143\001" +
    "\001\000\004\042\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\025\023\146\025\133\026\032\027" +
    "\027\001\001\000\002\001\001\000\004\040\150\001\001" +
    "\000\002\001\001\000\022\006\113\007\112\012\152\013" +
    "\107\015\104\016\102\017\106\021\114\001\001\000\002" +
    "\001\001\000\004\041\154\001\001\000\004\020\155\001" +
    "\001\000\002\001\001\000\022\006\113\007\112\012\157" +
    "\013\107\015\104\016\102\017\106\021\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\015\025\022\163\023\040\025\041\026\032\027\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\025\023\170\025\133\026" +
    "\032\027\027\001\001\000\002\001\001\000\004\035\172" +
    "\001\001\000\002\001\001\000\022\006\113\007\112\012" +
    "\174\013\107\015\104\016\102\017\106\021\114\001\001" +
    "\000\002\001\001\000\004\020\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\074\011\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\074\011\207" +
    "\001\001\000\002\001\001\000\004\033\211\001\001\000" +
    "\002\001\001\000\022\006\113\007\112\012\213\013\107" +
    "\015\104\016\102\017\106\021\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 	
	// Build Tree met java code, zodat onze CUP file netjes blijft & onze code compileert en makkelijk te debuggen is.
	private BuildTree buildTree = new BuildTree();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_fact ::= code_proc 
            {
              AbstractNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallNode c = (CallNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_fact ::= FALSE 
            {
              AbstractNode RESULT =null;
		 RESULT = new StaticValueNode<Boolean>(false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_fact ::= TRUE 
            {
              AbstractNode RESULT =null;
		 RESULT = new StaticValueNode<Boolean>(true);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_fact ::= STATIC_STRING 
            {
              AbstractNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StaticValueNode<String>(s);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_fact ::= STATIC_INT 
            {
              AbstractNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StaticValueNode<Integer>(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_fact ::= IDENTIFIER 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CallVarNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_oper ::= FSLASH 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_oper ::= MOD 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_oper ::= ASTERICK 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_term ::= expr_fact 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode f = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressionNode(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_term ::= expr_fact expr_oper expr_term 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode v = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,o,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_result ::= expr_term 
            {
              ExpressionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressionNode(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_result",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_result ::= expr_term MINUS expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,a,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_result",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_result ::= expr_term PLUS expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,a,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_result",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_test ::= expr_result GREATEREQ expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,d,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_test ::= expr_result GREATER expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,d,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_test ::= expr_result LESSEQ expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,d,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_test ::= expr_result LESS expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,d,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_test ::= expr_result NEQ expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,d,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_test ::= expr_result EQEQ expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,d,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expr_result 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	buildTree.debugMsg("result Expression");
										RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expr_test 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			buildTree.debugMsg("boolean Expression");
										RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // else_decl ::= 
            {
              IfNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // else_decl ::= ELSE NT$7 LBRACE code_body RBRACE 
            {
              IfNode RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$7 ::= 
            {
              IfNode RESULT =null;
 	buildTree.pushNode(new IfNode(null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // else_decl ::= ELSE LPAREN expr_test RPAREN NT$5 LBRACE code_body RBRACE NT$6 else_decl 
            {
              IfNode RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$6 ::= 
            {
              IfNode RESULT =(IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$5 ::= 
            {
              IfNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 	buildTree.pushNode(new IfNode(expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if_decl ::= IF LPAREN expr_test RPAREN NT$3 LBRACE code_body RBRACE NT$4 else_decl 
            {
              IfNode RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$4 ::= 
            {
              IfNode RESULT =(IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$3 ::= 
            {
              IfNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 	buildTree.pushNode(new IfNode(expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // while_decl ::= WHILE LPAREN expr_test RPAREN NT$2 LBRACE code_body RBRACE else_decl 
            {
              WhileNode RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (WhileNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_decl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$2 ::= 
            {
              WhileNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 	buildTree.pushNode(new WhileNode(expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // code_params ::= 
            {
              LinkedList<ExpressionNode> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_params",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // code_params ::= expression COMMA code_params 
            {
              LinkedList<ExpressionNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ExpressionNode> prs = (LinkedList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ExpressionNode> d = new LinkedList<ExpressionNode>();
				   d.add(e);
				   d.addAll(prs);
				   RESULT = d;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_params",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // code_params ::= expression 
            {
              LinkedList<ExpressionNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ExpressionNode> d =  new LinkedList<ExpressionNode>();
				   d.add(e);
				   RESULT = d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_params",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // code_proc ::= IDENTIFIER LPAREN code_params RPAREN SEMICOLON 
            {
              CallNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExpressionNode> params = (LinkedList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 buildTree.debugMsg("Call to proc/func: " + id ); 
				   buildTree.addCode( new CallNode(id,params) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_proc",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // code_assign ::= IDENTIFIER EQ expression SEMICOLON 
            {
              AssignmentNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 buildTree.debugMsg("Assignment to var: " + id ); 
				   buildTree.addCode( new AssignmentNode(id,e) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_assign",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // code_print ::= PRINT LPAREN expression RPAREN SEMICOLON 
            {
              AbstractNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 buildTree.debugMsg("Print function called");
				   buildTree.addCode( new PrintNode(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_print",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // code_body ::= 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // code_body ::= code_print code_body 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // code_body ::= if_decl code_body 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // code_body ::= while_decl code_body 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // code_body ::= code_proc code_body 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // code_body ::= code_assign code_body 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // code_body ::= var_decl code_body 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_type ::= SYM_BOOLEAN 
            {
              Integer RESULT =null;
		 RESULT = sym.SYM_BOOLEAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_type ::= SYM_STRING 
            {
              Integer RESULT =null;
		 RESULT = sym.SYM_STRING; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_type ::= SYM_INT 
            {
              Integer RESULT =null;
		 RESULT = sym.SYM_INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_names ::= IDENTIFIER COMMA var_names 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<String> names = new LinkedList<String>();
				   names.add(id);
				   names.addAll(ids);
				   RESULT = names; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_names",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_names ::= IDENTIFIER 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<String> names = new LinkedList<String>();
				   names.add(id);
				   RESULT = names; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_names",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_decl ::= var_type var_names EQ expr_result SEMICOLON 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 buildTree.addVariables(t,n,expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_decl ::= var_type var_names SEMICOLON 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 buildTree.addVariables(t,n, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param_decl ::= 
            {
              LinkedList<VariableNode< ? >> RESULT =null;
		 RESULT = new LinkedList<VariableNode<?>>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param_decl ::= var_type IDENTIFIER COMMA param_decl 
            {
              LinkedList<VariableNode< ? >> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<VariableNode< ? >> prms = (LinkedList<VariableNode< ? >>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<VariableNode<?>> params = new LinkedList<VariableNode<?>>();
				   params.add(buildTree.createParameter(t, param));
				   params.addAll(prms);
				   RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // param_decl ::= var_type IDENTIFIER 
            {
              LinkedList<VariableNode< ? >> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<VariableNode<?>> params = new LinkedList<VariableNode<?>>();
				   params.add(buildTree.createParameter(t, param));
				   RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_decl ::= var_type IDENTIFIER LPAREN param_decl RPAREN NT$1 LBRACE code_body RETURN expression SEMICOLON RBRACE 
            {
              AbstractNode RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (AbstractNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<VariableNode< ? >> params = (LinkedList<VariableNode< ? >>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					buildTree.addReturnStatement(expr);
					buildTree.popNode();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<VariableNode< ? >> params = (LinkedList<VariableNode< ? >>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
					buildTree.pushNode(new FunctionNode(id, params)); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // proc_decl ::= VOID IDENTIFIER LPAREN param_decl RPAREN NT$0 LBRACE code_body RBRACE 
            {
              AbstractNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (AbstractNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<VariableNode< ? >> params = (LinkedList<VariableNode< ? >>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
					buildTree.popNode();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<VariableNode< ? >> params = (LinkedList<VariableNode< ? >>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
					buildTree.pushNode(new ProcedureNode(id, params)); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_ ::= 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_ ::= func_decl program_ 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_ ::= proc_decl program_ 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_ ::= var_decl program_ 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_ 
            {
              BuildTree RESULT =null;
		 RESULT = buildTree; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BuildTree start_val = (BuildTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

