
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 09 21:05:15 CET 2012
//----------------------------------------------------

package saxion.pti.generated;

import java_cup.runtime.*;
import saxion.pti.ast.BuildTree;
import saxion.pti.ast.nodes.*;
import java.util.Collections;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 09 21:05:15 CET 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\032\002\000\002\004\013\000\002\033\002\000" +
    "\002\005\016\000\002\011\004\000\002\011\006\000\002" +
    "\011\002\000\002\006\005\000\002\006\007\000\002\010" +
    "\003\000\002\010\005\000\002\007\003\000\002\007\003" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\002\000\002" +
    "\015\006\000\002\014\007\000\002\013\003\000\002\013" +
    "\005\000\002\013\002\000\002\034\002\000\002\020\013" +
    "\000\002\035\002\000\002\036\002\000\002\016\014\000" +
    "\002\037\002\000\002\040\002\000\002\017\014\000\002" +
    "\041\002\000\002\017\007\000\002\017\002\000\002\021" +
    "\003\000\002\021\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\003\000\002\025\005\000\002\025\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\012\002\ufffc\037\006\040\014\041\011\001" +
    "\002\000\012\002\ufffc\037\006\040\014\041\011\001\002" +
    "\000\004\002\000\001\002\000\004\044\174\001\002\000" +
    "\004\002\173\001\002\000\012\002\ufffc\037\006\040\014" +
    "\041\011\001\002\000\004\044\uffef\001\002\000\004\044" +
    "\016\001\002\000\012\002\ufffc\037\006\040\014\041\011" +
    "\001\002\000\004\044\ufff0\001\002\000\004\002\uffff\001" +
    "\002\000\012\013\ufff2\027\071\035\070\036\ufff2\001\002" +
    "\000\006\013\020\036\021\001\002\000\010\042\023\044" +
    "\026\045\030\001\002\000\024\002\ufff4\005\ufff4\006\ufff4" +
    "\011\ufff4\032\ufff4\037\ufff4\040\ufff4\041\ufff4\044\ufff4\001" +
    "\002\000\004\036\067\001\002\000\036\012\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\030\uffc7\035\uffc7\036\uffc7\001\002" +
    "\000\036\012\uffcc\014\uffcc\015\uffcc\016\uffcc\017\065\020" +
    "\064\021\063\023\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc" +
    "\035\uffcc\036\uffcc\001\002\000\030\012\uffce\014\uffce\015" +
    "\056\016\057\023\uffce\024\uffce\025\uffce\026\uffce\030\uffce" +
    "\035\uffce\036\uffce\001\002\000\040\012\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\031\030\uffc8\035\uffc8\036\uffc8\001" +
    "\002\000\036\012\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\030" +
    "\uffc5\035\uffc5\036\uffc5\001\002\000\036\012\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\030\uffc6\035\uffc6\036\uffc6\001\002" +
    "\000\012\030\uffe4\042\023\044\026\045\030\001\002\000" +
    "\010\030\uffd8\035\uffd8\036\uffd8\001\002\000\024\012\046" +
    "\014\047\023\045\024\043\025\044\026\042\030\uffd7\035" +
    "\uffd7\036\uffd7\001\002\000\006\030\uffe6\035\040\001\002" +
    "\000\004\030\036\001\002\000\004\036\037\001\002\000" +
    "\054\005\uffe7\006\uffe7\011\uffe7\012\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\030\uffe7\032\uffe7\035\uffe7\036\uffe7\040\uffe7" +
    "\041\uffe7\044\uffe7\001\002\000\012\030\uffe4\042\023\044" +
    "\026\045\030\001\002\000\004\030\uffe5\001\002\000\010" +
    "\042\023\044\026\045\030\001\002\000\010\042\023\044" +
    "\026\045\030\001\002\000\010\042\023\044\026\045\030" +
    "\001\002\000\010\042\023\044\026\045\030\001\002\000" +
    "\010\042\023\044\026\045\030\001\002\000\010\042\023" +
    "\044\026\045\030\001\002\000\010\030\uffd6\035\uffd6\036" +
    "\uffd6\001\002\000\010\030\uffd5\035\uffd5\036\uffd5\001\002" +
    "\000\010\030\uffd4\035\uffd4\036\uffd4\001\002\000\010\030" +
    "\uffd2\035\uffd2\036\uffd2\001\002\000\010\030\uffd3\035\uffd3" +
    "\036\uffd3\001\002\000\010\030\uffd1\035\uffd1\036\uffd1\001" +
    "\002\000\010\042\023\044\026\045\030\001\002\000\010" +
    "\042\023\044\026\045\030\001\002\000\024\012\uffcf\014" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\030\uffcf\035\uffcf" +
    "\036\uffcf\001\002\000\024\012\uffd0\014\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\030\uffd0\035\uffd0\036\uffd0\001\002" +
    "\000\010\042\023\044\026\045\030\001\002\000\010\042" +
    "\uffc9\044\uffc9\045\uffc9\001\002\000\010\042\uffca\044\uffca" +
    "\045\uffca\001\002\000\010\042\uffcb\044\uffcb\045\uffcb\001" +
    "\002\000\030\012\uffcd\014\uffcd\015\uffcd\016\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\030\uffcd\035\uffcd\036\uffcd\001" +
    "\002\000\024\002\ufff3\005\ufff3\006\ufff3\011\ufff3\032\ufff3" +
    "\037\ufff3\040\ufff3\041\ufff3\044\ufff3\001\002\000\004\044" +
    "\113\001\002\000\010\030\ufff5\040\014\041\011\001\002" +
    "\000\004\044\166\001\002\000\004\030\074\001\002\000" +
    "\004\031\ufff9\001\002\000\004\031\076\001\002\000\016" +
    "\005\077\006\103\011\uffe9\040\014\041\011\044\105\001" +
    "\002\000\004\027\156\001\002\000\020\005\077\006\103" +
    "\011\uffe9\032\uffe9\040\014\041\011\044\105\001\002\000" +
    "\004\011\151\001\002\000\020\005\077\006\103\011\uffe9" +
    "\032\uffe9\040\014\041\011\044\105\001\002\000\004\027" +
    "\120\001\002\000\020\005\077\006\103\011\uffe9\032\uffe9" +
    "\040\014\041\011\044\105\001\002\000\006\013\114\027" +
    "\031\001\002\000\004\044\113\001\002\000\020\005\077" +
    "\006\103\011\uffe9\032\uffe9\040\014\041\011\044\105\001" +
    "\002\000\020\005\077\006\103\011\uffe9\032\uffe9\040\014" +
    "\041\011\044\105\001\002\000\006\011\uffeb\032\uffeb\001" +
    "\002\000\006\011\uffee\032\uffee\001\002\000\010\013\ufff2" +
    "\035\070\036\ufff2\001\002\000\010\042\023\044\026\045" +
    "\030\001\002\000\004\036\116\001\002\000\020\005\uffe8" +
    "\006\uffe8\011\uffe8\032\uffe8\040\uffe8\041\uffe8\044\uffe8\001" +
    "\002\000\006\011\uffea\032\uffea\001\002\000\010\042\023" +
    "\044\026\045\030\001\002\000\004\030\123\001\002\000" +
    "\016\012\046\014\047\023\045\024\043\025\044\026\042" +
    "\001\002\000\004\031\uffe1\001\002\000\004\031\125\001" +
    "\002\000\016\005\077\006\103\032\uffe9\040\014\041\011" +
    "\044\105\001\002\000\004\032\127\001\002\000\022\004" +
    "\uffe0\005\uffe0\006\uffe0\011\uffe0\032\uffe0\040\uffe0\041\uffe0" +
    "\044\uffe0\001\002\000\022\004\131\005\uffd9\006\uffd9\011" +
    "\uffd9\032\uffd9\040\uffd9\041\uffd9\044\uffd9\001\002\000\006" +
    "\027\134\031\uffdb\001\002\000\020\005\uffdf\006\uffdf\011" +
    "\uffdf\032\uffdf\040\uffdf\041\uffdf\044\uffdf\001\002\000\004" +
    "\031\145\001\002\000\010\042\023\044\026\045\030\001" +
    "\002\000\004\030\136\001\002\000\004\031\uffde\001\002" +
    "\000\004\031\140\001\002\000\016\005\077\006\103\032" +
    "\uffe9\040\014\041\011\044\105\001\002\000\004\032\142" +
    "\001\002\000\022\004\uffdd\005\uffdd\006\uffdd\011\uffdd\032" +
    "\uffdd\040\uffdd\041\uffdd\044\uffdd\001\002\000\022\004\131" +
    "\005\uffd9\006\uffd9\011\uffd9\032\uffd9\040\uffd9\041\uffd9\044" +
    "\uffd9\001\002\000\020\005\uffdc\006\uffdc\011\uffdc\032\uffdc" +
    "\040\uffdc\041\uffdc\044\uffdc\001\002\000\016\005\077\006" +
    "\103\032\uffe9\040\014\041\011\044\105\001\002\000\004" +
    "\032\147\001\002\000\020\005\uffda\006\uffda\011\uffda\032" +
    "\uffda\040\uffda\041\uffda\044\uffda\001\002\000\006\011\uffec" +
    "\032\uffec\001\002\000\010\042\023\044\026\045\030\001" +
    "\002\000\004\036\153\001\002\000\004\032\154\001\002" +
    "\000\012\002\ufff8\037\ufff8\040\ufff8\041\ufff8\001\002\000" +
    "\006\011\uffed\032\uffed\001\002\000\010\042\023\044\026" +
    "\045\030\001\002\000\004\030\160\001\002\000\004\031" +
    "\uffe3\001\002\000\004\031\162\001\002\000\016\005\077" +
    "\006\103\032\uffe9\040\014\041\011\044\105\001\002\000" +
    "\004\032\164\001\002\000\022\004\131\005\uffd9\006\uffd9" +
    "\011\uffd9\032\uffd9\040\uffd9\041\uffd9\044\uffd9\001\002\000" +
    "\020\005\uffe2\006\uffe2\011\uffe2\032\uffe2\040\uffe2\041\uffe2" +
    "\044\uffe2\001\002\000\006\030\ufff7\035\167\001\002\000" +
    "\010\030\ufff5\040\014\041\011\001\002\000\004\030\ufff6" +
    "\001\002\000\006\013\ufff1\036\ufff1\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\001\001\002\000\004\027\175" +
    "\001\002\000\010\030\ufff5\040\014\041\011\001\002\000" +
    "\004\030\177\001\002\000\004\031\ufffb\001\002\000\004" +
    "\031\201\001\002\000\016\005\077\006\103\032\uffe9\040" +
    "\014\041\011\044\105\001\002\000\004\032\203\001\002" +
    "\000\012\002\ufffa\037\ufffa\040\ufffa\041\ufffa\001\002\000" +
    "\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\016\002\006\003\004\004\003\005\007\006" +
    "\012\007\011\001\001\000\014\003\203\004\003\005\007" +
    "\006\012\007\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\171\004\003\005\007" +
    "\006\012\007\011\001\001\000\002\001\001\000\004\010" +
    "\016\001\001\000\014\003\014\004\003\005\007\006\012" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\026\024\021" +
    "\025\024\026\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\034\014\026\021\033\022\031\024\032" +
    "\025\024\026\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\040\014\026\021\033\022" +
    "\031\024\032\025\024\026\023\001\001\000\002\001\001" +
    "\000\012\014\026\024\054\025\024\026\023\001\001\000" +
    "\012\014\026\024\053\025\024\026\023\001\001\000\012" +
    "\014\026\024\052\025\024\026\023\001\001\000\012\014" +
    "\026\024\051\025\024\026\023\001\001\000\012\014\026" +
    "\024\050\025\024\026\023\001\001\000\012\014\026\024" +
    "\047\025\024\026\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\026\024\060\025\024" +
    "\026\023\001\001\000\012\014\026\024\057\025\024\026" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\026\025\065\026\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\170\001\001\000\006\007\071\011" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\074\001\001\000\002\001\001\000\020\006\106\007" +
    "\105\012\100\014\101\015\077\016\103\020\107\001\001" +
    "\000\002\001\001\000\020\006\106\007\105\012\154\014" +
    "\101\015\077\016\103\020\107\001\001\000\002\001\001" +
    "\000\020\006\106\007\105\012\147\014\101\015\077\016" +
    "\103\020\107\001\001\000\002\001\001\000\020\006\106" +
    "\007\105\012\116\014\101\015\077\016\103\020\107\001" +
    "\001\000\002\001\001\000\004\010\016\001\001\000\020" +
    "\006\106\007\105\012\111\014\101\015\077\016\103\020" +
    "\107\001\001\000\020\006\106\007\105\012\110\014\101" +
    "\015\077\016\103\020\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\014\026\021\114" +
    "\022\031\024\032\025\024\026\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\026" +
    "\022\120\024\121\025\024\026\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\123\001\001\000\002" +
    "\001\001\000\020\006\106\007\105\012\125\014\101\015" +
    "\077\016\103\020\107\001\001\000\002\001\001\000\004" +
    "\036\127\001\001\000\004\017\131\001\001\000\004\041" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\026\022\134\024\121\025\024\026\023\001\001\000" +
    "\002\001\001\000\004\037\136\001\001\000\002\001\001" +
    "\000\020\006\106\007\105\012\140\014\101\015\077\016" +
    "\103\020\107\001\001\000\002\001\001\000\004\040\142" +
    "\001\001\000\004\017\143\001\001\000\002\001\001\000" +
    "\020\006\106\007\105\012\145\014\101\015\077\016\103" +
    "\020\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\026\021\151\022\031\024\032" +
    "\025\024\026\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\026" +
    "\022\156\024\121\025\024\026\023\001\001\000\002\001" +
    "\001\000\004\034\160\001\001\000\002\001\001\000\020" +
    "\006\106\007\105\012\162\014\101\015\077\016\103\020" +
    "\107\001\001\000\002\001\001\000\004\017\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\071\011" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\071\011\175\001\001\000\002\001\001\000\004\032\177" +
    "\001\001\000\002\001\001\000\020\006\106\007\105\012" +
    "\201\014\101\015\077\016\103\020\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 	
	// Build Tree met java code, zodat onze CUP file netjes blijft & onze code compileert en makkelijk te debuggen is.
	private BuildTree buildTree = new BuildTree();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_fact ::= code_proc 
            {
              AbstractNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallNode c = (CallNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_fact ::= STATIC_STRING 
            {
              AbstractNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StaticValueNode<String>(s);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_fact ::= STATIC_INT 
            {
              AbstractNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StaticValueNode<Integer>(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_fact ::= IDENTIFIER 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CallVarNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_oper ::= FSLASH 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_oper ::= MOD 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_oper ::= ASTERICK 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_term ::= expr_fact 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode f = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressionNode(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_term",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_term ::= expr_fact expr_oper expr_term 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode v = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,o,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_term",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_result ::= expr_term 
            {
              ExpressionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressionNode(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_result",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_result ::= expr_term MINUS expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,a,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_result",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_result ::= expr_term PLUS expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,a,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_result",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_test ::= expr_result GREATEREQ expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,d,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_test ::= expr_result GREATER expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,d,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_test ::= expr_result LESSEQ expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,d,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_test ::= expr_result LESS expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,d,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_test ::= expr_result NEQ expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,d,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_test ::= expr_result EQEQ expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,d,r);
									   r.setLeft(e);
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expr_result 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	buildTree.debugMsg("result Expression");
										RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expr_test 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			buildTree.debugMsg("boolean Expression");
										RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // else_decl ::= 
            {
              IfNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // else_decl ::= ELSE NT$7 LBRACE code_body RBRACE 
            {
              IfNode RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$7 ::= 
            {
              IfNode RESULT =null;
 	buildTree.pushNode(new IfNode(null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // else_decl ::= ELSE LPAREN expr_test RPAREN NT$5 LBRACE code_body RBRACE NT$6 else_decl 
            {
              IfNode RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$6 ::= 
            {
              IfNode RESULT =(IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$5 ::= 
            {
              IfNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 	buildTree.pushNode(new IfNode(expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if_decl ::= IF LPAREN expr_test RPAREN NT$3 LBRACE code_body RBRACE NT$4 else_decl 
            {
              IfNode RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$4 ::= 
            {
              IfNode RESULT =(IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$3 ::= 
            {
              IfNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 	buildTree.pushNode(new IfNode(expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // while_decl ::= WHILE LPAREN expr_test RPAREN NT$2 LBRACE code_body RBRACE else_decl 
            {
              WhileNode RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (WhileNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$2 ::= 
            {
              WhileNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 	buildTree.pushNode(new WhileNode(expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // code_params ::= 
            {
              LinkedList<ExpressionNode> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_params",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // code_params ::= expression COMMA code_params 
            {
              LinkedList<ExpressionNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ExpressionNode> prs = (LinkedList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ExpressionNode> d = new LinkedList<ExpressionNode>();
				   d.add(e);
				   d.addAll(prs);
				   RESULT = d;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_params",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // code_params ::= expression 
            {
              LinkedList<ExpressionNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ExpressionNode> d =  new LinkedList<ExpressionNode>();
				   d.add(e);
				   RESULT = d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_params",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // code_proc ::= IDENTIFIER LPAREN code_params RPAREN SEMICOLON 
            {
              CallNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExpressionNode> params = (LinkedList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 buildTree.debugMsg("Call to proc/func: " + id ); 
				   buildTree.addCode( new CallNode(id,params) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_proc",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // code_assign ::= IDENTIFIER EQ expression SEMICOLON 
            {
              AssignmentNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 buildTree.debugMsg("Assignment to var: " + id ); 
				   buildTree.addCode( new AssignmentNode(id,e) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_assign",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // code_body ::= 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // code_body ::= if_decl code_body 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // code_body ::= while_decl code_body 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // code_body ::= code_proc code_body 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // code_body ::= code_assign code_body 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // code_body ::= var_decl code_body 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_type ::= SYM_STRING 
            {
              Integer RESULT =null;
		 RESULT = sym.SYM_STRING; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_type ::= SYM_INT 
            {
              Integer RESULT =null;
		 RESULT = sym.SYM_INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_names ::= IDENTIFIER COMMA var_names 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<String> names = new LinkedList<String>();
				   names.add(id);
				   names.addAll(ids);
				   RESULT = names; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_names",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_names ::= IDENTIFIER 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<String> names = new LinkedList<String>();
				   names.add(id);
				   RESULT = names; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_names",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_decl ::= var_type var_names EQ expr_result SEMICOLON 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 buildTree.addVariables(t,n,expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_decl ::= var_type var_names SEMICOLON 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 buildTree.addVariables(t,n, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param_decl ::= 
            {
              LinkedList<VariableNode< ? >> RESULT =null;
		 RESULT = new LinkedList<VariableNode<?>>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param_decl ::= var_type IDENTIFIER COMMA param_decl 
            {
              LinkedList<VariableNode< ? >> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<VariableNode< ? >> prms = (LinkedList<VariableNode< ? >>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<VariableNode<?>> params = new LinkedList<VariableNode<?>>();
				   params.add(buildTree.createParameter(t, param));
				   params.addAll(prms);
				   RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // param_decl ::= var_type IDENTIFIER 
            {
              LinkedList<VariableNode< ? >> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<VariableNode<?>> params = new LinkedList<VariableNode<?>>();
				   params.add(buildTree.createParameter(t, param));
				   RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_decl ::= var_type IDENTIFIER LPAREN param_decl RPAREN NT$1 LBRACE code_body RETURN expression SEMICOLON RBRACE 
            {
              AbstractNode RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (AbstractNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<VariableNode< ? >> params = (LinkedList<VariableNode< ? >>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		
					buildTree.popNode();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<VariableNode< ? >> params = (LinkedList<VariableNode< ? >>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
					buildTree.pushNode(new FunctionNode(id, params)); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // proc_decl ::= VOID IDENTIFIER LPAREN param_decl RPAREN NT$0 LBRACE code_body RBRACE 
            {
              AbstractNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (AbstractNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<VariableNode< ? >> params = (LinkedList<VariableNode< ? >>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
					buildTree.popNode();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<VariableNode< ? >> params = (LinkedList<VariableNode< ? >>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
					buildTree.pushNode(new ProcedureNode(id, params)); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_ ::= 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_ ::= func_decl program_ 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_ ::= proc_decl program_ 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_ ::= var_decl program_ 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_ 
            {
              BuildTree RESULT =null;
		 RESULT = buildTree; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BuildTree start_val = (BuildTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

