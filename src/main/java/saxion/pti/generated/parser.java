
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 13 18:11:23 CET 2012
//----------------------------------------------------

package saxion.pti.generated;

import java_cup.runtime.*;
import saxion.pti.ast.BuildTree;
import saxion.pti.ast.nodes.*;
import java.util.Collections;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 13 18:11:23 CET 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\035\002\000\002\004\013\000\002\036\002\000" +
    "\002\005\016\000\002\012\005\000\002\012\007\000\002" +
    "\012\002\000\002\006\006\000\002\006\010\000\002\011" +
    "\003\000\002\011\005\000\002\010\005\000\002\010\004" +
    "\000\002\010\002\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\013\003\000\002\013\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\002\000\002\014\007" +
    "\000\002\020\006\000\002\017\007\000\002\016\003\000" +
    "\002\016\005\000\002\016\002\000\002\037\002\000\002" +
    "\040\002\000\002\023\014\000\002\041\002\000\002\042" +
    "\002\000\002\021\014\000\002\043\002\000\002\044\002" +
    "\000\002\022\014\000\002\045\002\000\002\022\007\000" +
    "\002\022\002\000\002\024\003\000\002\024\003\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\003\000\002\030\005\000" +
    "\002\030\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\031\004\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\014\002\ufffc\007\011\037\006\040\015\041" +
    "\012\001\002\000\014\002\ufffc\007\011\037\006\040\015" +
    "\041\012\001\002\000\004\002\000\001\002\000\004\047" +
    "\217\001\002\000\004\002\216\001\002\000\014\002\ufffc" +
    "\007\011\037\006\040\015\041\012\001\002\000\004\047" +
    "\uffeb\001\002\000\004\047\uffec\001\002\000\004\047\017" +
    "\001\002\000\014\002\ufffc\007\011\037\006\040\015\041" +
    "\012\001\002\000\004\047\uffed\001\002\000\004\002\uffff" +
    "\001\002\000\014\013\ufff2\027\102\033\ufff2\035\101\036" +
    "\ufff2\001\002\000\010\013\uffee\033\021\036\uffee\001\002" +
    "\000\006\034\077\045\076\001\002\000\006\013\023\036" +
    "\024\001\002\000\014\042\031\043\026\045\025\047\033" +
    "\050\034\001\002\000\030\002\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\011\ufff4\032\ufff4\037\ufff4\040\ufff4\041\ufff4\044\ufff4" +
    "\047\ufff4\001\002\000\036\012\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\030\uffbf\035\uffbf\036\uffbf\001\002\000\036\012" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\030\uffbd\035\uffbd\036" +
    "\uffbd\001\002\000\004\036\075\001\002\000\036\012\uffbb" +
    "\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\030\uffbb\035\uffbb\036\uffbb" +
    "\001\002\000\036\012\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\030\uffbc\035\uffbc\036\uffbc\001\002\000\036\012\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\073\020\072\021\070\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\030\uffc4\035\uffc4\036\uffc4\001" +
    "\002\000\042\012\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\043\030\uffee\033\021\035\uffee\036\uffee\001\002\000\036" +
    "\012\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\030\uffbe\035\uffbe" +
    "\036\uffbe\001\002\000\030\012\uffc6\014\uffc6\015\036\016" +
    "\037\023\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6\035\uffc6" +
    "\036\uffc6\001\002\000\014\042\031\043\026\045\025\047" +
    "\033\050\034\001\002\000\014\042\031\043\026\045\025" +
    "\047\033\050\034\001\002\000\024\012\uffc7\014\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\030\uffc7\035\uffc7\036\uffc7" +
    "\001\002\000\024\012\uffc8\014\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\030\uffc8\035\uffc8\036\uffc8\001\002\000\036" +
    "\012\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\030\uffc0\035\uffc0" +
    "\036\uffc0\001\002\000\016\030\uffdd\042\031\043\026\045" +
    "\025\047\033\050\034\001\002\000\010\030\uffd0\035\uffd0" +
    "\036\uffd0\001\002\000\024\012\060\014\061\023\057\024" +
    "\055\025\056\026\054\030\uffcf\035\uffcf\036\uffcf\001\002" +
    "\000\004\030\052\001\002\000\006\030\uffdf\035\050\001" +
    "\002\000\016\030\uffdd\042\031\043\026\045\025\047\033" +
    "\050\034\001\002\000\004\030\uffde\001\002\000\004\036" +
    "\053\001\002\000\052\005\uffe0\006\uffe0\011\uffe0\012\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\032\uffe0\035\uffe0" +
    "\036\uffe0\044\uffe0\047\uffe0\001\002\000\014\042\031\043" +
    "\026\045\025\047\033\050\034\001\002\000\014\042\031" +
    "\043\026\045\025\047\033\050\034\001\002\000\014\042" +
    "\031\043\026\045\025\047\033\050\034\001\002\000\014" +
    "\042\031\043\026\045\025\047\033\050\034\001\002\000" +
    "\014\042\031\043\026\045\025\047\033\050\034\001\002" +
    "\000\014\042\031\043\026\045\025\047\033\050\034\001" +
    "\002\000\010\030\uffce\035\uffce\036\uffce\001\002\000\010" +
    "\030\uffcd\035\uffcd\036\uffcd\001\002\000\010\030\uffcc\035" +
    "\uffcc\036\uffcc\001\002\000\010\030\uffca\035\uffca\036\uffca" +
    "\001\002\000\010\030\uffcb\035\uffcb\036\uffcb\001\002\000" +
    "\010\030\uffc9\035\uffc9\036\uffc9\001\002\000\014\042\uffc1" +
    "\043\uffc1\045\uffc1\047\uffc1\050\uffc1\001\002\000\014\042" +
    "\031\043\026\045\025\047\033\050\034\001\002\000\014" +
    "\042\uffc2\043\uffc2\045\uffc2\047\uffc2\050\uffc2\001\002\000" +
    "\014\042\uffc3\043\uffc3\045\uffc3\047\uffc3\050\uffc3\001\002" +
    "\000\030\012\uffc5\014\uffc5\015\uffc5\016\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\030\uffc5\035\uffc5\036\uffc5\001\002" +
    "\000\030\002\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\032" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\044\ufff3\047\ufff3\001\002" +
    "\000\004\034\100\001\002\000\040\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\030\uffef\035\uffef\036\uffef\001" +
    "\002\000\040\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\030\ufff0\035\ufff0\036\ufff0\001\002\000\004\047\127" +
    "\001\002\000\012\007\011\030\ufff5\040\015\041\012\001" +
    "\002\000\004\047\210\001\002\000\004\030\105\001\002" +
    "\000\004\031\ufff9\001\002\000\004\031\107\001\002\000" +
    "\022\005\111\006\114\007\011\011\uffe3\040\015\041\012" +
    "\044\117\047\120\001\002\000\004\011\204\001\002\000" +
    "\004\027\uffdc\001\002\000\016\005\111\006\114\011\uffe3" +
    "\032\uffe3\044\117\047\120\001\002\000\016\005\111\006" +
    "\114\011\uffe3\032\uffe3\044\117\047\120\001\002\000\004" +
    "\027\141\001\002\000\016\005\111\006\114\011\uffe3\032" +
    "\uffe3\044\117\047\120\001\002\000\016\005\111\006\114" +
    "\011\uffe3\032\uffe3\044\117\047\120\001\002\000\004\027" +
    "\133\001\002\000\006\013\130\027\043\001\002\000\004" +
    "\047\127\001\002\000\024\005\111\006\114\007\011\011" +
    "\uffe3\032\uffe3\040\015\041\012\044\117\047\120\001\002" +
    "\000\006\011\uffea\032\uffea\001\002\000\016\005\111\006" +
    "\114\011\uffe3\032\uffe3\044\117\047\120\001\002\000\006" +
    "\011\uffe6\032\uffe6\001\002\000\006\011\uffe9\032\uffe9\001" +
    "\002\000\012\013\ufff2\033\ufff2\035\101\036\ufff2\001\002" +
    "\000\014\042\031\043\026\045\025\047\033\050\034\001" +
    "\002\000\004\036\132\001\002\000\016\005\uffe1\006\uffe1" +
    "\011\uffe1\032\uffe1\044\uffe1\047\uffe1\001\002\000\014\042" +
    "\031\043\026\045\025\047\033\050\034\001\002\000\004" +
    "\030\135\001\002\000\004\036\136\001\002\000\016\005" +
    "\uffe2\006\uffe2\011\uffe2\032\uffe2\044\uffe2\047\uffe2\001\002" +
    "\000\006\011\uffe5\032\uffe5\001\002\000\006\011\uffe4\032" +
    "\uffe4\001\002\000\014\042\031\043\026\045\025\047\033" +
    "\050\034\001\002\000\004\030\144\001\002\000\016\012" +
    "\060\014\061\023\057\024\055\025\056\026\054\001\002" +
    "\000\004\031\uffd9\001\002\000\004\031\146\001\002\000" +
    "\014\005\111\006\114\032\uffe3\044\117\047\120\001\002" +
    "\000\004\032\150\001\002\000\020\004\uffd8\005\uffd8\006" +
    "\uffd8\011\uffd8\032\uffd8\044\uffd8\047\uffd8\001\002\000\020" +
    "\004\152\005\uffd1\006\uffd1\011\uffd1\032\uffd1\044\uffd1\047" +
    "\uffd1\001\002\000\006\027\155\031\uffd3\001\002\000\016" +
    "\005\uffd7\006\uffd7\011\uffd7\032\uffd7\044\uffd7\047\uffd7\001" +
    "\002\000\004\031\166\001\002\000\014\042\031\043\026" +
    "\045\025\047\033\050\034\001\002\000\004\030\157\001" +
    "\002\000\004\031\uffd6\001\002\000\004\031\161\001\002" +
    "\000\014\005\111\006\114\032\uffe3\044\117\047\120\001" +
    "\002\000\004\032\163\001\002\000\020\004\uffd5\005\uffd5" +
    "\006\uffd5\011\uffd5\032\uffd5\044\uffd5\047\uffd5\001\002\000" +
    "\020\004\152\005\uffd1\006\uffd1\011\uffd1\032\uffd1\044\uffd1" +
    "\047\uffd1\001\002\000\016\005\uffd4\006\uffd4\011\uffd4\032" +
    "\uffd4\044\uffd4\047\uffd4\001\002\000\014\005\111\006\114" +
    "\032\uffe3\044\117\047\120\001\002\000\004\032\170\001" +
    "\002\000\016\005\uffd2\006\uffd2\011\uffd2\032\uffd2\044\uffd2" +
    "\047\uffd2\001\002\000\006\011\uffe7\032\uffe7\001\002\000" +
    "\006\011\uffe8\032\uffe8\001\002\000\004\027\174\001\002" +
    "\000\014\042\031\043\026\045\025\047\033\050\034\001" +
    "\002\000\004\030\176\001\002\000\004\031\uffdb\001\002" +
    "\000\004\031\200\001\002\000\014\005\111\006\114\032" +
    "\uffe3\044\117\047\120\001\002\000\004\032\202\001\002" +
    "\000\020\004\152\005\uffd1\006\uffd1\011\uffd1\032\uffd1\044" +
    "\uffd1\047\uffd1\001\002\000\016\005\uffda\006\uffda\011\uffda" +
    "\032\uffda\044\uffda\047\uffda\001\002\000\014\042\031\043" +
    "\026\045\025\047\033\050\034\001\002\000\004\036\206" +
    "\001\002\000\004\032\207\001\002\000\014\002\ufff8\007" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\001\002\000\010\030\uffee" +
    "\033\021\035\uffee\001\002\000\006\030\ufff7\035\212\001" +
    "\002\000\012\007\011\030\ufff5\040\015\041\012\001\002" +
    "\000\004\030\ufff6\001\002\000\010\013\ufff1\033\ufff1\036" +
    "\ufff1\001\002\000\004\002\ufffd\001\002\000\004\002\001" +
    "\001\002\000\004\027\220\001\002\000\012\007\011\030" +
    "\ufff5\040\015\041\012\001\002\000\004\030\222\001\002" +
    "\000\004\031\ufffb\001\002\000\004\031\224\001\002\000" +
    "\022\005\111\006\114\007\011\032\uffe3\040\015\041\012" +
    "\044\117\047\120\001\002\000\004\032\226\001\002\000" +
    "\014\002\ufffa\007\ufffa\037\ufffa\040\ufffa\041\ufffa\001\002" +
    "\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\016\002\006\003\004\004\003\005\007\006" +
    "\013\007\012\001\001\000\014\003\226\004\003\005\007" +
    "\006\013\007\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\214\004\003\005\007" +
    "\006\013\007\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\017\001\001\000\014\003\015\004\003" +
    "\005\007\006\013\007\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\027\027" +
    "\026\030\034\031\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\070\001\001\000\004" +
    "\010\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\027\027\040\030\034\031\031\001\001\000\012" +
    "\017\027\027\037\030\034\031\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\045" +
    "\017\027\024\046\025\043\027\044\030\034\031\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\016\050\017\027\024\046\025" +
    "\043\027\044\030\034\031\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\027\027" +
    "\066\030\034\031\031\001\001\000\012\017\027\027\065" +
    "\030\034\031\031\001\001\000\012\017\027\027\064\030" +
    "\034\031\031\001\001\000\012\017\027\027\063\030\034" +
    "\031\031\001\001\000\012\017\027\027\062\030\034\031" +
    "\031\001\001\000\012\017\027\027\061\030\034\031\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\027\030\073\031\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\213\001\001\000\006\007\102" +
    "\012\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\105\001\001\000\002\001\001\000\024\006\121" +
    "\007\120\013\107\014\114\015\122\017\112\020\111\021" +
    "\115\023\123\001\001\000\002\001\001\000\004\037\172" +
    "\001\001\000\016\014\114\015\171\017\112\020\111\021" +
    "\115\023\123\001\001\000\016\014\114\015\170\017\112" +
    "\020\111\021\115\023\123\001\001\000\002\001\001\000" +
    "\016\014\114\015\137\017\112\020\111\021\115\023\123" +
    "\001\001\000\016\014\114\015\136\017\112\020\111\021" +
    "\115\023\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\017\001\001\000\024\006\121\007\120\013" +
    "\125\014\114\015\122\017\112\020\111\021\115\023\123" +
    "\001\001\000\002\001\001\000\016\014\114\015\124\017" +
    "\112\020\111\021\115\023\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\027\024" +
    "\130\025\043\027\044\030\034\031\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\027\024\133\025" +
    "\043\027\044\030\034\031\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\027\025\141\027\142\030\034" +
    "\031\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\144\001\001\000\002\001\001\000\016\014\114" +
    "\015\146\017\112\020\111\021\115\023\123\001\001\000" +
    "\002\001\001\000\004\042\150\001\001\000\004\022\152" +
    "\001\001\000\004\045\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\027\025\155\027\142\030\034" +
    "\031\031\001\001\000\002\001\001\000\004\043\157\001" +
    "\001\000\002\001\001\000\016\014\114\015\161\017\112" +
    "\020\111\021\115\023\123\001\001\000\002\001\001\000" +
    "\004\044\163\001\001\000\004\022\164\001\001\000\002" +
    "\001\001\000\016\014\114\015\166\017\112\020\111\021" +
    "\115\023\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\027\025\174\027\142\030\034\031\031\001\001" +
    "\000\002\001\001\000\004\040\176\001\001\000\002\001" +
    "\001\000\016\014\114\015\200\017\112\020\111\021\115" +
    "\023\123\001\001\000\002\001\001\000\004\022\202\001" +
    "\001\000\002\001\001\000\016\017\027\024\204\025\043" +
    "\027\044\030\034\031\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\210\001\001" +
    "\000\002\001\001\000\006\007\102\012\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\102\012\220\001" +
    "\001\000\002\001\001\000\004\035\222\001\001\000\002" +
    "\001\001\000\024\006\121\007\120\013\224\014\114\015" +
    "\122\017\112\020\111\021\115\023\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 	
	// Build Tree met java code, zodat onze CUP file netjes blijft & onze code compileert en makkelijk te debuggen is.
	private BuildTree buildTree = new BuildTree();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_fact ::= code_proc 
            {
              AbstractNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallNode c = (CallNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_fact ::= FALSE 
            {
              AbstractNode RESULT =null;
		 RESULT = new StaticValueNode<Boolean>(false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_fact ::= TRUE 
            {
              AbstractNode RESULT =null;
		 RESULT = new StaticValueNode<Boolean>(true);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_fact ::= STATIC_STRING 
            {
              AbstractNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StaticValueNode<String>(s);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_fact ::= STATIC_INT 
            {
              AbstractNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StaticValueNode<Integer>(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_fact ::= IDENTIFIER var_array 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CallVarNode(id,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_oper ::= FSLASH 
            {
              Integer RESULT =null;
		 RESULT = sym.FSLASH; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_oper ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = sym.MOD; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_oper ::= ASTERICK 
            {
              Integer RESULT =null;
		 RESULT = sym.ASTERICK; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_term ::= expr_fact 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode f = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 f.setParent(buildTree.getCurrentNode());
									   RESULT = new ExpressionNode(f); 
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_term",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_term ::= expr_fact expr_oper expr_term 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode v = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,o,r);
									   r.setLeft(e);
									   v.setParent(buildTree.getCurrentNode());
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_term",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_result ::= expr_term 
            {
              ExpressionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(t); 
									   e.setParent(buildTree.getCurrentNode());
									   RESULT = e;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_result",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_result ::= expr_term MINUS expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,sym.MINUS,r);
									   r.setLeft(e); e.setParent(buildTree.getCurrentNode());
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_result",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_result ::= expr_term PLUS expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,sym.PLUS,r);
									   r.setLeft(e); e.setParent(buildTree.getCurrentNode());
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_result",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_test ::= expr_result GREATEREQ expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,sym.GREATEREQ,r);
									   r.setLeft(e); e.setParent(buildTree.getCurrentNode());
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_test ::= expr_result GREATER expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,sym.GREATER,r);
									   r.setLeft(e); e.setParent(buildTree.getCurrentNode());
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_test ::= expr_result LESSEQ expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,sym.LESSEQ,r);
									   r.setLeft(e); e.setParent(buildTree.getCurrentNode());
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_test ::= expr_result LESS expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,sym.LESS,r);
									   r.setLeft(e); e.setParent(buildTree.getCurrentNode());
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_test ::= expr_result NEQ expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,sym.NEQ,r);
									   r.setLeft(e); e.setParent(buildTree.getCurrentNode());
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_test ::= expr_result EQEQ expr_result 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpressionNode e = new ExpressionNode(v,sym.EQEQ,r);
									   r.setLeft(e); e.setParent(buildTree.getCurrentNode());
									   RESULT = e;
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_test",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expr_result 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	buildTree.debugMsg("result Expression");
										RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expr_test 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			buildTree.debugMsg("boolean Expression");
										RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // else_decl ::= 
            {
              IfNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_decl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // else_decl ::= ELSE NT$8 LBRACE code_block RBRACE 
            {
              IfNode RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_decl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$8 ::= 
            {
              IfNode RESULT =null;
 	buildTree.pushNode(new IfNode(null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // else_decl ::= ELSE LPAREN expr_test RPAREN NT$6 LBRACE code_block RBRACE NT$7 else_decl 
            {
              IfNode RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_decl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$7 ::= 
            {
              IfNode RESULT =(IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$6 ::= 
            {
              IfNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 	buildTree.pushNode(new IfNode(expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if_decl ::= IF LPAREN expr_test RPAREN NT$4 LBRACE code_block RBRACE NT$5 else_decl 
            {
              IfNode RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_decl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$5 ::= 
            {
              IfNode RESULT =(IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$4 ::= 
            {
              IfNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 	buildTree.pushNode(new IfNode(expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // while_decl ::= WHILE NT$2 LPAREN expr_test RPAREN NT$3 LBRACE code_block RBRACE else_decl 
            {
              WhileNode RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (WhileNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_decl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$3 ::= 
            {
              WhileNode RESULT =(WhileNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 	((WhileNode)buildTree.getCurrentNode()).setStatement(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$2 ::= 
            {
              WhileNode RESULT =null;
  buildTree.pushNode(new WhileNode()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // code_args ::= 
            {
              LinkedList<ExpressionNode> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_args",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // code_args ::= expression COMMA code_args 
            {
              LinkedList<ExpressionNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ExpressionNode> prs = (LinkedList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ExpressionNode> d = new LinkedList<ExpressionNode>();
				   d.add(e);
				   d.addAll(prs);
				   RESULT = d;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_args",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // code_args ::= expression 
            {
              LinkedList<ExpressionNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ExpressionNode> d =  new LinkedList<ExpressionNode>();
				   d.add(e);
				   RESULT = d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_args",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // code_proc ::= IDENTIFIER LPAREN code_args RPAREN SEMICOLON 
            {
              CallNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExpressionNode> params = (LinkedList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 buildTree.debugMsg("Call to proc/func: " + id ); 
				   buildTree.addCode( new CallNode(id,params) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // code_assign ::= IDENTIFIER EQ expression SEMICOLON 
            {
              AssignmentNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 buildTree.debugMsg("Assignment to var: " + id ); 
				   buildTree.addCode( new AssignmentNode(id,e) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_assign",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // code_print ::= PRINT LPAREN expression RPAREN SEMICOLON 
            {
              AbstractNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 buildTree.debugMsg("Print function called");
				   buildTree.addCode( new PrintNode(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_print",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // code_block ::= 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // code_block ::= code_print code_block 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // code_block ::= if_decl code_block 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // code_block ::= while_decl code_block 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // code_block ::= code_proc code_block 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // code_block ::= code_assign code_block 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // scope_body ::= var_decl scope_body 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scope_body",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // scope_body ::= code_block 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scope_body",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_type ::= SYM_BOOLEAN 
            {
              Integer RESULT =null;
		 RESULT = sym.SYM_BOOLEAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_type ::= SYM_STRING 
            {
              Integer RESULT =null;
		 RESULT = sym.SYM_STRING; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_type ::= SYM_INT 
            {
              Integer RESULT =null;
		 RESULT = sym.SYM_INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_array ::= 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_array",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_array ::= LSQPAREN RSQPAREN 
            {
              Integer RESULT =null;
		 RESULT = new Integer(10); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_array",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_array ::= LSQPAREN STATIC_INT RSQPAREN 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Integer(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_array",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_names ::= IDENTIFIER COMMA var_names 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<String> names = new LinkedList<String>();
				   names.add(id);
				   names.addAll(ids);
				   RESULT = names; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_names",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_names ::= IDENTIFIER 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<String> names = new LinkedList<String>();
				   names.add(id);
				   RESULT = names; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_names",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_decl ::= var_type var_names var_array EQ expr_result SEMICOLON 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 buildTree.addVariables(t,n,expr, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_decl ::= var_type var_names var_array SEMICOLON 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 buildTree.addVariables(t,n, null, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param_decl ::= 
            {
              LinkedList<VariableNode> RESULT =null;
		 RESULT = new LinkedList<VariableNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param_decl ::= var_type IDENTIFIER var_array COMMA param_decl 
            {
              LinkedList<VariableNode> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<VariableNode> prms = (LinkedList<VariableNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<VariableNode> params = new LinkedList<VariableNode>();
				   params.add(buildTree.createParameter(t, param, a));
				   params.addAll(prms);
				   RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // param_decl ::= var_type IDENTIFIER var_array 
            {
              LinkedList<VariableNode> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<VariableNode> params = new LinkedList<VariableNode>();
				   params.add(buildTree.createParameter(t, param, a));
				   RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_decl ::= var_type IDENTIFIER LPAREN param_decl RPAREN NT$1 LBRACE scope_body RETURN expression SEMICOLON RBRACE 
            {
              AbstractNode RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (AbstractNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<VariableNode> params = (LinkedList<VariableNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					buildTree.addReturnStatement(expr);
					buildTree.popNode();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<VariableNode> params = (LinkedList<VariableNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
					buildTree.pushNode(buildTree.createFunctionNode(id, t, params)); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // proc_decl ::= VOID IDENTIFIER LPAREN param_decl RPAREN NT$0 LBRACE scope_body RBRACE 
            {
              AbstractNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (AbstractNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<VariableNode> params = (LinkedList<VariableNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
					buildTree.popNode();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<VariableNode> params = (LinkedList<VariableNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
					buildTree.pushNode(new ProcedureNode(id, params)); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_ ::= 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_ ::= func_decl program_ 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_ ::= proc_decl program_ 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_ ::= var_decl program_ 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_ 
            {
              BuildTree RESULT =null;
		 RESULT = buildTree; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BuildTree start_val = (BuildTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

