
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 16 17:26:03 CET 2012
//----------------------------------------------------

package saxion.pti.generated;

import java_cup.runtime.*;
import saxion.pti.ast.BuildTree;
import saxion.pti.ast.nodes.*;
import java.util.Collections;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 16 17:26:03 CET 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\033\002\000\002\004\013\000\002\034\002\000" +
    "\002\005\016\000\002\013\005\000\002\013\007\000\002" +
    "\013\002\000\002\006\003\000\002\006\010\000\002\007" +
    "\006\000\002\012\003\000\002\012\005\000\002\011\005" +
    "\000\002\011\004\000\002\011\002\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\014\003\000\002" +
    "\014\004\000\002\016\004\000\002\016\005\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\002" +
    "\000\002\015\007\000\002\021\006\000\002\020\006\000" +
    "\002\017\003\000\002\017\005\000\002\017\002\000\002" +
    "\035\002\000\002\036\002\000\002\024\014\000\002\037" +
    "\002\000\002\040\002\000\002\022\014\000\002\041\002" +
    "\000\002\042\002\000\002\043\002\000\002\023\016\000" +
    "\002\044\002\000\002\023\007\000\002\023\002\000\002" +
    "\025\003\000\002\026\005\000\002\026\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\027\004\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\014\002\ufffc\007\010\037\006\040\015\041" +
    "\013\001\002\000\014\002\ufffc\007\010\037\006\040\015" +
    "\041\013\001\002\000\004\002\000\001\002\000\004\047" +
    "\211\001\002\000\004\002\210\001\002\000\004\047\uffea" +
    "\001\002\000\014\002\ufffc\007\010\037\006\040\015\041" +
    "\013\001\002\000\014\002\ufffc\007\010\037\006\040\015" +
    "\041\013\001\002\000\004\047\uffeb\001\002\000\004\047" +
    "\016\001\002\000\004\047\uffec\001\002\000\012\027\027" +
    "\033\ufff1\035\026\036\ufff1\001\002\000\006\033\021\036" +
    "\uffed\001\002\000\004\036\025\001\002\000\006\034\023" +
    "\045\022\001\002\000\004\034\024\001\002\000\040\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\023\uffee\024\uffee\025\uffee\026\uffee\030\uffee\035" +
    "\uffee\036\uffee\001\002\000\040\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\030\uffef\035\uffef\036\uffef\001\002" +
    "\000\030\002\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\032" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\044\ufff2\047\ufff2\001\002" +
    "\000\004\047\055\001\002\000\012\007\010\030\ufff5\040" +
    "\015\041\013\001\002\000\004\047\201\001\002\000\004" +
    "\030\032\001\002\000\004\031\ufff9\001\002\000\004\031" +
    "\034\001\002\000\022\005\036\006\042\007\010\011\uffe2" +
    "\040\015\041\013\044\045\047\046\001\002\000\004\011" +
    "\175\001\002\000\004\027\uffdb\001\002\000\016\005\036" +
    "\006\042\011\uffe2\032\uffe2\044\045\047\046\001\002\000" +
    "\004\036\161\001\002\000\024\005\ufff4\006\ufff4\007\ufff4" +
    "\011\ufff4\032\ufff4\040\ufff4\041\ufff4\044\ufff4\047\ufff4\001" +
    "\002\000\004\027\uffd8\001\002\000\016\005\036\006\042" +
    "\011\uffe2\032\uffe2\044\045\047\046\001\002\000\016\005" +
    "\036\006\042\011\uffe2\032\uffe2\044\045\047\046\001\002" +
    "\000\004\027\122\001\002\000\006\013\117\027\072\001" +
    "\002\000\004\047\055\001\002\000\024\005\036\006\042" +
    "\007\010\011\uffe2\032\uffe2\040\015\041\013\044\045\047" +
    "\046\001\002\000\006\011\uffe9\032\uffe9\001\002\000\016" +
    "\005\036\006\042\011\uffe2\032\uffe2\044\045\047\046\001" +
    "\002\000\006\011\uffe5\032\uffe5\001\002\000\006\011\uffe8" +
    "\032\uffe8\001\002\000\012\013\ufff1\033\ufff1\035\026\036" +
    "\ufff1\001\002\000\010\013\uffed\033\021\036\uffed\001\002" +
    "\000\006\013\060\036\025\001\002\000\014\042\065\043" +
    "\062\045\063\047\066\050\070\001\002\000\036\012\112" +
    "\014\103\015\113\016\102\017\104\020\106\021\110\023" +
    "\114\024\105\025\107\026\111\030\uffcc\035\uffcc\036\uffcc" +
    "\001\002\000\036\012\uffbd\014\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\030\uffbd\035\uffbd\036\uffbd\001\002\000\036\012\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\030\uffbf\035\uffbf\036\uffbf\001" +
    "\002\000\004\036\101\001\002\000\036\012\uffbc\014\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\030\uffbc\035\uffbc\036\uffbc\001\002" +
    "\000\042\012\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\072" +
    "\030\uffed\033\021\035\uffed\036\uffed\001\002\000\036\012" +
    "\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\030\uffbb\035\uffbb\036" +
    "\uffbb\001\002\000\036\012\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\030\uffbe\035\uffbe\036\uffbe\001\002\000\036\012\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\030\uffc0\035\uffc0\036\uffc0" +
    "\001\002\000\016\030\uffdc\042\065\043\062\045\063\047" +
    "\066\050\070\001\002\000\004\030\100\001\002\000\006" +
    "\030\uffde\035\076\001\002\000\010\030\uffce\035\uffce\036" +
    "\uffce\001\002\000\016\030\uffdc\042\065\043\062\045\063" +
    "\047\066\050\070\001\002\000\004\030\uffdd\001\002\000" +
    "\036\012\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf\035" +
    "\uffdf\036\uffdf\001\002\000\024\005\ufff3\006\ufff3\007\ufff3" +
    "\011\ufff3\032\ufff3\040\ufff3\041\ufff3\044\ufff3\047\ufff3\001" +
    "\002\000\014\042\uffc7\043\uffc7\045\uffc7\047\uffc7\050\uffc7" +
    "\001\002\000\014\042\uffc6\043\uffc6\045\uffc6\047\uffc6\050" +
    "\uffc6\001\002\000\014\042\uffcb\043\uffcb\045\uffcb\047\uffcb" +
    "\050\uffcb\001\002\000\014\042\uffc3\043\uffc3\045\uffc3\047" +
    "\uffc3\050\uffc3\001\002\000\014\042\uffca\043\uffca\045\uffca" +
    "\047\uffca\050\uffca\001\002\000\014\042\uffc2\043\uffc2\045" +
    "\uffc2\047\uffc2\050\uffc2\001\002\000\014\042\uffc9\043\uffc9" +
    "\045\uffc9\047\uffc9\050\uffc9\001\002\000\014\042\uffc1\043" +
    "\uffc1\045\uffc1\047\uffc1\050\uffc1\001\002\000\014\042\uffc5" +
    "\043\uffc5\045\uffc5\047\uffc5\050\uffc5\001\002\000\014\042" +
    "\uffc8\043\uffc8\045\uffc8\047\uffc8\050\uffc8\001\002\000\014" +
    "\042\uffc4\043\uffc4\045\uffc4\047\uffc4\050\uffc4\001\002\000" +
    "\014\042\065\043\062\045\063\047\066\050\070\001\002" +
    "\000\010\030\uffcd\035\uffcd\036\uffcd\001\002\000\014\042" +
    "\065\043\062\045\063\047\066\050\070\001\002\000\004" +
    "\036\121\001\002\000\016\005\uffe0\006\uffe0\011\uffe0\032" +
    "\uffe0\044\uffe0\047\uffe0\001\002\000\014\042\065\043\062" +
    "\045\063\047\066\050\070\001\002\000\004\030\124\001" +
    "\002\000\004\036\125\001\002\000\016\005\uffe1\006\uffe1" +
    "\011\uffe1\032\uffe1\044\uffe1\047\uffe1\001\002\000\006\011" +
    "\uffe3\032\uffe3\001\002\000\006\011\uffe4\032\uffe4\001\002" +
    "\000\004\027\131\001\002\000\014\042\065\043\062\045" +
    "\063\047\066\050\070\001\002\000\004\030\133\001\002" +
    "\000\004\031\uffd7\001\002\000\004\031\135\001\002\000" +
    "\014\005\036\006\042\032\uffe2\044\045\047\046\001\002" +
    "\000\004\032\137\001\002\000\020\004\140\005\uffcf\006" +
    "\uffcf\011\uffcf\032\uffcf\044\uffcf\047\uffcf\001\002\000\006" +
    "\006\143\031\uffd1\001\002\000\016\005\uffd6\006\uffd6\011" +
    "\uffd6\032\uffd6\044\uffd6\047\uffd6\001\002\000\004\031\156" +
    "\001\002\000\004\027\uffd5\001\002\000\004\027\145\001" +
    "\002\000\014\042\065\043\062\045\063\047\066\050\070" +
    "\001\002\000\004\030\147\001\002\000\004\031\uffd4\001" +
    "\002\000\004\031\151\001\002\000\014\005\036\006\042" +
    "\032\uffe2\044\045\047\046\001\002\000\004\032\153\001" +
    "\002\000\020\004\uffd3\005\uffd3\006\uffd3\011\uffd3\032\uffd3" +
    "\044\uffd3\047\uffd3\001\002\000\020\004\140\005\uffcf\006" +
    "\uffcf\011\uffcf\032\uffcf\044\uffcf\047\uffcf\001\002\000\016" +
    "\005\uffd2\006\uffd2\011\uffd2\032\uffd2\044\uffd2\047\uffd2\001" +
    "\002\000\014\005\036\006\042\032\uffe2\044\045\047\046" +
    "\001\002\000\004\032\160\001\002\000\016\005\uffd0\006" +
    "\uffd0\011\uffd0\032\uffd0\044\uffd0\047\uffd0\001\002\000\016" +
    "\005\036\006\042\011\uffe2\032\uffe2\044\045\047\046\001" +
    "\002\000\006\011\uffe6\032\uffe6\001\002\000\006\011\uffe7" +
    "\032\uffe7\001\002\000\004\027\165\001\002\000\014\042" +
    "\065\043\062\045\063\047\066\050\070\001\002\000\004" +
    "\030\167\001\002\000\004\031\uffda\001\002\000\004\031" +
    "\171\001\002\000\014\005\036\006\042\032\uffe2\044\045" +
    "\047\046\001\002\000\004\032\173\001\002\000\020\004" +
    "\140\005\uffcf\006\uffcf\011\uffcf\032\uffcf\044\uffcf\047\uffcf" +
    "\001\002\000\016\005\uffd9\006\uffd9\011\uffd9\032\uffd9\044" +
    "\uffd9\047\uffd9\001\002\000\014\042\065\043\062\045\063" +
    "\047\066\050\070\001\002\000\004\036\177\001\002\000" +
    "\004\032\200\001\002\000\014\002\ufff8\007\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\001\002\000\010\030\uffed\033\021\035" +
    "\uffed\001\002\000\006\030\ufff7\035\203\001\002\000\012" +
    "\007\010\030\ufff5\040\015\041\013\001\002\000\004\030" +
    "\ufff6\001\002\000\010\013\ufff0\033\ufff0\036\ufff0\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\001\001\002\000\004\027\212\001\002\000\012" +
    "\007\010\030\ufff5\040\015\041\013\001\002\000\004\030" +
    "\214\001\002\000\004\031\ufffb\001\002\000\004\031\216" +
    "\001\002\000\022\005\036\006\042\007\010\032\uffe2\040" +
    "\015\041\013\044\045\047\046\001\002\000\004\032\220" +
    "\001\002\000\014\002\ufffa\007\ufffa\037\ufffa\040\ufffa\041" +
    "\ufffa\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\016\002\006\003\004\004\003\005\010\007" +
    "\011\010\013\001\001\000\014\003\220\004\003\005\010" +
    "\007\011\010\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\206" +
    "\004\003\005\010\007\011\010\013\001\001\000\014\003" +
    "\205\004\003\005\010\007\011\010\013\001\001\000\002" +
    "\001\001\000\004\012\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\204\001\001" +
    "\000\006\010\027\013\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\032\001\001\000\002\001\001" +
    "\000\026\006\047\007\040\010\046\014\034\015\043\016" +
    "\050\020\037\021\036\022\042\024\051\001\001\000\002" +
    "\001\001\000\004\035\163\001\001\000\016\015\043\016" +
    "\162\020\037\021\036\022\042\024\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\127\001\001\000" +
    "\016\015\043\016\126\020\037\021\036\022\042\024\051" +
    "\001\001\000\016\015\043\016\125\020\037\021\036\022" +
    "\042\024\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\055\001\001\000\026\006\047\007\040\010" +
    "\046\014\053\015\043\016\050\020\037\021\036\022\042" +
    "\024\051\001\001\000\002\001\001\000\016\015\043\016" +
    "\052\020\037\021\036\022\042\024\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\056\001\001\000\002\001\001\000\010\020\066\026\063" +
    "\027\060\001\001\000\004\032\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\072\020\066\025\073" +
    "\026\074\027\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\076\020\066\025\073" +
    "\026\074\027\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\066\026\115\027\060\001\001\000\002\001\001\000\012" +
    "\020\066\025\117\026\074\027\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\066\025\122\026\074" +
    "\027\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\066\025\131\026\074\027\060\001" +
    "\001\000\002\001\001\000\004\040\133\001\001\000\002" +
    "\001\001\000\016\015\043\016\135\020\037\021\036\022" +
    "\042\024\051\001\001\000\002\001\001\000\004\023\140" +
    "\001\001\000\004\044\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\143\001\001\000\002\001\001" +
    "\000\012\020\066\025\145\026\074\027\060\001\001\000" +
    "\002\001\001\000\004\042\147\001\001\000\002\001\001" +
    "\000\016\015\043\016\151\020\037\021\036\022\042\024" +
    "\051\001\001\000\002\001\001\000\004\043\153\001\001" +
    "\000\004\023\154\001\001\000\002\001\001\000\016\015" +
    "\043\016\156\020\037\021\036\022\042\024\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\015\043\016" +
    "\161\020\037\021\036\022\042\024\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\066\025\165\026\074\027\060\001\001\000\002\001\001" +
    "\000\004\036\167\001\001\000\002\001\001\000\016\015" +
    "\043\016\171\020\037\021\036\022\042\024\051\001\001" +
    "\000\002\001\001\000\004\023\173\001\001\000\002\001" +
    "\001\000\012\020\066\025\175\026\074\027\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\201\001\001\000\002\001\001\000\006\010\027" +
    "\013\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\027\013\212\001\001\000\002\001" +
    "\001\000\004\033\214\001\001\000\002\001\001\000\026" +
    "\006\047\007\040\010\046\014\216\015\043\016\050\020" +
    "\037\021\036\022\042\024\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 	
	// Build Tree met java code, zodat onze CUP file netjes blijft & onze code compileert en makkelijk te debuggen is.
	private BuildTree buildTree = new BuildTree();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_fact ::= code_proc 
            {
              AbstractNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallNode c = (CallNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_fact ::= FALSE 
            {
              AbstractNode RESULT =null;
		 RESULT = new StaticValueNode<Boolean>(buildTree.getCurrentNode(),false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_fact ::= TRUE 
            {
              AbstractNode RESULT =null;
		 RESULT = new StaticValueNode<Boolean>(buildTree.getCurrentNode(),true);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_fact ::= STATIC_STRING 
            {
              AbstractNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StaticValueNode<String>(buildTree.getCurrentNode(),s);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_fact ::= STATIC_INT 
            {
              AbstractNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StaticValueNode<Integer>(buildTree.getCurrentNode(),i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_fact ::= IDENTIFIER var_array 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CallVarNode(buildTree.getCurrentNode(),id,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_fact",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_oper ::= GREATEREQ 
            {
              Integer RESULT =null;
		 RESULT = sym.GREATEREQ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_oper ::= GREATER 
            {
              Integer RESULT =null;
		 RESULT = sym.GREATER; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_oper ::= LESSEQ 
            {
              Integer RESULT =null;
		 RESULT = sym.LESSEQ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_oper ::= LESS 
            {
              Integer RESULT =null;
		 RESULT = sym.LESS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_oper ::= NEQ 
            {
              Integer RESULT =null;
		 RESULT = sym.NEQ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_oper ::= EQEQ 
            {
              Integer RESULT =null;
		 RESULT = sym.EQEQ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_oper ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT = sym.MINUS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_oper ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT = sym.PLUS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_oper ::= FSLASH 
            {
              Integer RESULT =null;
		 RESULT = sym.FSLASH; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_oper ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = sym.MOD; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_oper ::= ASTERICK 
            {
              Integer RESULT =null;
		 RESULT = sym.ASTERICK; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_oper",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_term ::= expr_fact 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode f = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
									   RESULT = new ExpressionNode(buildTree.getCurrentNode(),f); 
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_term ::= expr_fact expr_oper expr_term 
            {
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode v = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressionNode(buildTree.getCurrentNode(),v,o,r);
									 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expr_term 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	buildTree.debugMsg("result Expression");
										RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // else_decl ::= 
            {
              IfNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_decl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // else_decl ::= ELSE NT$9 LBRACE code_block RBRACE 
            {
              IfNode RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_decl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$9 ::= 
            {
              IfNode RESULT =null;
 	buildTree.pushNode(new ElseNode(buildTree.getCurrentNode())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // else_decl ::= ELSE IF NT$6 LPAREN expression RPAREN NT$7 LBRACE code_block RBRACE NT$8 else_decl 
            {
              IfNode RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_decl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$8 ::= 
            {
              IfNode RESULT =(IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$7 ::= 
            {
              IfNode RESULT =(IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 	((IfNode)buildTree.getCurrentNode()).setStatement(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$6 ::= 
            {
              IfNode RESULT =null;
 	buildTree.pushNode(new ElseNode(buildTree.getCurrentNode())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if_decl ::= IF NT$4 LPAREN expression RPAREN NT$5 LBRACE code_block RBRACE else_decl 
            {
              IfNode RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_decl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$5 ::= 
            {
              IfNode RESULT =(IfNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 	((IfNode)buildTree.getCurrentNode()).setStatement(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$4 ::= 
            {
              IfNode RESULT =null;
 	buildTree.pushNode(new IfNode(buildTree.getCurrentNode())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // while_decl ::= WHILE NT$2 LPAREN expression RPAREN NT$3 LBRACE code_block RBRACE else_decl 
            {
              WhileNode RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (WhileNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 	buildTree.popNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_decl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$3 ::= 
            {
              WhileNode RESULT =(WhileNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 	((WhileNode)buildTree.getCurrentNode()).setStatement(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$2 ::= 
            {
              WhileNode RESULT =null;
  buildTree.pushNode(new WhileNode(buildTree.getCurrentNode())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // code_args ::= 
            {
              LinkedList<ExpressionNode> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_args",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // code_args ::= expression COMMA code_args 
            {
              LinkedList<ExpressionNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ExpressionNode> prs = (LinkedList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ExpressionNode> d = new LinkedList<ExpressionNode>();
				   d.add(e);
				   d.addAll(prs);
				   RESULT = d;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_args",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // code_args ::= expression 
            {
              LinkedList<ExpressionNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ExpressionNode> d =  new LinkedList<ExpressionNode>();
				   d.add(e);
				   RESULT = d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_args",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // code_proc ::= IDENTIFIER LPAREN code_args RPAREN 
            {
              CallNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ExpressionNode> params = (LinkedList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 buildTree.debugMsg("Call to proc/func: " + id ); 
				   buildTree.addCode( new CallNode(buildTree.getCurrentNode(),id,params) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_proc",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // code_assign ::= IDENTIFIER EQ expression SEMICOLON 
            {
              AssignmentNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 buildTree.debugMsg("Assignment to var: " + id ); 
				   buildTree.addCode( new AssignmentNode(buildTree.getCurrentNode(),id,e) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_assign",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // code_print ::= PRINT LPAREN expression RPAREN SEMICOLON 
            {
              AbstractNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 buildTree.debugMsg("Print function called");
				   buildTree.addCode( new PrintNode(buildTree.getCurrentNode(),e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_print",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // code_block ::= 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // code_block ::= code_print code_block 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // code_block ::= if_decl code_block 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // code_block ::= while_decl code_block 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // code_block ::= code_proc SEMICOLON code_block 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // code_block ::= code_assign code_block 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // scope_body ::= var_decl scope_body 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scope_body",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // scope_body ::= code_block 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scope_body",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_type ::= SYM_BOOLEAN 
            {
              Integer RESULT =null;
		 RESULT = sym.SYM_BOOLEAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_type ::= SYM_STRING 
            {
              Integer RESULT =null;
		 RESULT = sym.SYM_STRING; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_type ::= SYM_INT 
            {
              Integer RESULT =null;
		 RESULT = sym.SYM_INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_array ::= 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_array",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_array ::= LSQPAREN RSQPAREN 
            {
              Integer RESULT =null;
		 RESULT = new Integer(10); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_array",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_array ::= LSQPAREN STATIC_INT RSQPAREN 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Integer(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_array",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_names ::= IDENTIFIER COMMA var_names 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<String> names = new LinkedList<String>();
				   names.add(id);
				   names.addAll(ids);
				   RESULT = names; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_names",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_names ::= IDENTIFIER 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<String> names = new LinkedList<String>();
				   names.add(id);
				   RESULT = names; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_names",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_simple ::= var_type var_names var_array SEMICOLON 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 buildTree.addVariables(t,n, null, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_simple",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_decl ::= var_type var_names var_array EQ expr_term SEMICOLON 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 buildTree.addVariables(t,n,expr, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_decl ::= var_simple 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param_decl ::= 
            {
              LinkedList<VariableNode> RESULT =null;
		 RESULT = new LinkedList<VariableNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param_decl ::= var_type IDENTIFIER var_array COMMA param_decl 
            {
              LinkedList<VariableNode> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<VariableNode> prms = (LinkedList<VariableNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<VariableNode> params = new LinkedList<VariableNode>();
				   params.add(buildTree.createParameter(t, param, a));
				   params.addAll(prms);
				   RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // param_decl ::= var_type IDENTIFIER var_array 
            {
              LinkedList<VariableNode> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<VariableNode> params = new LinkedList<VariableNode>();
				   params.add(buildTree.createParameter(t, param, a));
				   RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_decl ::= var_type IDENTIFIER LPAREN param_decl RPAREN NT$1 LBRACE scope_body RETURN expression SEMICOLON RBRACE 
            {
              AbstractNode RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (AbstractNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<VariableNode> params = (LinkedList<VariableNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					buildTree.addReturnStatement(expr);
					buildTree.popNode();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<VariableNode> params = (LinkedList<VariableNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
					buildTree.pushNode(buildTree.createFunctionNode(id, t, params)); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // proc_decl ::= VOID IDENTIFIER LPAREN param_decl RPAREN NT$0 LBRACE scope_body RBRACE 
            {
              AbstractNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (AbstractNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<VariableNode> params = (LinkedList<VariableNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
					buildTree.popNode();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<VariableNode> params = (LinkedList<VariableNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
					buildTree.pushNode(new ProcedureNode(buildTree.getCurrentNode(),id, params)); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_ ::= 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_ ::= func_decl program_ 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_ ::= proc_decl program_ 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_ ::= var_simple program_ 
            {
              AbstractNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_ 
            {
              BuildTree RESULT =null;
		 RESULT = buildTree; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BuildTree start_val = (BuildTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

